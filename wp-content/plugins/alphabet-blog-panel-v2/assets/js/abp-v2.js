(function() {
  'use strict';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const root = document.getElementById('abp-v2-root');
  const alphabetOnly = document.querySelector('.abp-v2-alphabet-only');
  
  if (!root && !alphabetOnly) return;

  // –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
  const letters = root ? root.querySelectorAll('.abp-v2-letter') : document.querySelectorAll('.abp-v2-alphabet-only .abp-v2-letter');
  const listEl = document.getElementById('abp-v2-list');
  const loader = root ? root.querySelector('.abp-v2-loader') : null;
  const pager = root ? root.querySelector('.abp-v2-pagination') : null;

  let currentLetter = null;
  let currentPage = 1;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
  function setLoading(show) {
    if (loader) {
      if (show) {
        loader.style.display = 'flex';
        if (listEl) listEl.style.opacity = '0.5';
      } else {
        loader.style.display = 'none';
        if (listEl) listEl.style.opacity = '1';
      }
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±—É–∫–≤—É
  function updateActiveLetter(letter) {
    letters.forEach(l => l.classList.remove('is-active'));
    const activeLetter = (root || alphabetOnly).querySelector(`[data-letter="${CSS.escape(letter)}"]`);
    if (activeLetter) activeLetter.classList.add('is-active');
    currentLetter = letter;
  }

  // –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
  function renderPagination(pagination) {
    if (!pager) return;
    
    if (!pagination || pagination.total <= 1) {
      pager.style.display = 'none';
      return;
    }

    pager.style.display = 'flex';
    pager.innerHTML = '';

    // –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const prevBtn = document.createElement('button');
    prevBtn.className = 'abp-v2-page';
    prevBtn.textContent = '‚Äπ';
    prevBtn.disabled = !pagination.has_prev;
    if (pagination.has_prev) {
      prevBtn.addEventListener('click', () => loadPosts(currentLetter, pagination.current - 1));
    }
    pager.appendChild(prevBtn);

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const info = document.createElement('span');
    info.className = 'abp-v2-page-info';
    info.textContent = `–°—Ç—Ä. ${pagination.current} –∏–∑ ${pagination.total}`;
    pager.appendChild(info);

    // –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    const nextBtn = document.createElement('button');
    nextBtn.className = 'abp-v2-page';
    nextBtn.textContent = '‚Ä∫';
    nextBtn.disabled = !pagination.has_next;
    if (pagination.has_next) {
      nextBtn.addEventListener('click', () => loadPosts(currentLetter, pagination.current + 1));
    }
    pager.appendChild(nextBtn);
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã
  async function loadPosts(letter, page = 1, pushState = true) {
    if (!letter) return;
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—å–∏ - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã
    if (document.body.classList.contains('single-post')) {
      return;
    }

    currentLetter = letter;
    currentPage = page;
    setLoading(true);

    const formData = new FormData();
    formData.append('action', 'abp_v2_fetch_posts');
    formData.append('nonce', window.ABP_V2.nonce);
    formData.append('letter', letter);
    formData.append('page', page);

    try {
      const response = await fetch(window.ABP_V2.ajax, {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      
      if (!data.success) {
        throw new Error(data.data?.message || '–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
      if (listEl) {
        listEl.innerHTML = data.data.html;
      }
      renderPagination(data.data.pagination);

      // –û–±–Ω–æ–≤–ª—è–µ–º URL
      if (pushState) {
        const url = `/${window.ABP_V2.slug}2/${encodeURIComponent(letter)}/`;
        window.history.pushState({ letter, page }, '', url);
        document.title = `–ë–ª–æ–≥ ‚Äî –±—É–∫–≤–∞ ¬´${letter}¬ª | BizFin Pro`;
      }

    } catch (error) {
      console.error('ABP v2 Error:', error);
      if (listEl) {
        listEl.innerHTML = '<div class="abp-v2-empty">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.</div>';
      }
      if (pager) {
        pager.style.display = 'none';
      }
    } finally {
      setLoading(false);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±—É–∫–≤
  letters.forEach(letter => {
    letter.addEventListener('click', (e) => {
      if (letter.dataset.disabled === 'true') return;
      
      const letterChar = letter.getAttribute('data-letter');
      
      // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—å–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –±–ª–æ–≥
      if (document.body.classList.contains('single-post')) {
        window.location.href = `/${window.ABP_V2.slug}2/${encodeURIComponent(letterChar)}/`;
        return;
      }
      
      // –ï—Å–ª–∏ –º—ã –≤ –±–ª–æ–≥–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏
      updateActiveLetter(letterChar);
      loadPosts(letterChar, 1, true);
    });
  });

  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  window.addEventListener('popstate', (e) => {
    if (e.state && e.state.letter) {
      const { letter, page } = e.state;
      updateActiveLetter(letter);
      loadPosts(letter, page || 1, false);
    }
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  function initialize() {
    // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—Ç–∞—Ç—å–∏ - —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –±—É–∫–≤—É
    if (document.body.classList.contains('single-post')) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—É–∫–≤—É –∏–∑ URL —Å—Ç–∞—Ç—å–∏
      const pathMatch = window.location.pathname.match(new RegExp(`/${window.ABP_V2.slug}2/([^/]+)/?`));
      const urlLetter = pathMatch ? decodeURIComponent(pathMatch[1]) : null;
      
      if (urlLetter) {
        updateActiveLetter(urlLetter);
      }
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const pathMatch = window.location.pathname.match(new RegExp(`/${window.ABP_V2.slug}2/([^/]+)/?`));
    const urlLetter = pathMatch ? decodeURIComponent(pathMatch[1]) : null;

    let startLetter = urlLetter;
    
    if (!startLetter) {
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –±—É–∫–≤—É
      const firstAvailable = (root || alphabetOnly).querySelector('.abp-v2-letter:not([data-disabled="1"])');
      startLetter = firstAvailable ? firstAvailable.getAttribute('data-letter') : null;
    }

    if (startLetter) {
      updateActiveLetter(startLetter);
      loadPosts(startLetter, 1, !!urlLetter);
    } else {
      if (listEl) {
        listEl.innerHTML = '<div class="abp-v2-empty">–í –±–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.</div>';
      }
    }
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initialize);
  } else {
    initialize();
  }

  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ABP_V2 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  window.ABP_V2 = {
    ajax: window.ABP_V2 ? window.ABP_V2.ajax : '/wp-admin/admin-ajax.php',
    nonce: window.ABP_V2 ? window.ABP_V2.nonce : '',
    slug: 'blog'
  };

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞
  function initializeSearch() {
    const searchInput = document.getElementById('abp-v2-search-input');
    const searchBtn = document.getElementById('abp-v2-search-btn');
    
    if (!searchInput || !searchBtn) return;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    initializeMainPageAlphabet();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞
    searchBtn.addEventListener('click', function() {
      const query = searchInput.value.trim();
      if (query) {
        performSearch(query);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
    searchInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        const query = searchInput.value.trim();
        if (query) {
          performSearch(query);
        }
      }
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
  async function performSearch(query) {
    console.log('Searching for:', query);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const searchBtn = document.getElementById('abp-v2-search-btn');
    if (searchBtn) {
      searchBtn.textContent = '‚è≥';
      searchBtn.disabled = true;
    }
    
    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ AJAX
      const form = new FormData();
      form.append('action', 'abp_v2_search');
      form.append('nonce', window.ABP_V2.nonce);
      form.append('query', query);
      
      const response = await fetch(window.ABP_V2.ajax, {
        method: 'POST',
        body: form
      });
      
      const json = await response.json();
      
      if (json.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        updateSearchResults(json.data);
      } else {
        console.error('Search error:', json.data);
        alert('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ' + (json.data.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    } catch (error) {
      console.error('Search request failed:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞');
    } finally {
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
      if (searchBtn) {
        searchBtn.textContent = 'üîç';
        searchBtn.disabled = false;
      }
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
  function updateSearchResults(data) {
    const postsGrid = document.querySelector('.abp-v2-main-posts-grid');
    const postsHeader = document.querySelector('.abp-v2-main-posts-header h2');
    const postsCount = document.querySelector('.abp-v2-main-posts-count');
    
    if (!postsGrid) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if (postsHeader) {
      postsHeader.textContent = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´${data.query}¬ª`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    if (postsCount) {
      postsCount.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${data.count} —Å—Ç–∞—Ç–µ–π`;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    if (data.posts && data.posts.length > 0) {
      postsGrid.innerHTML = data.posts.map(post => {
        const thumbnailHtml = post.thumbnail ? 
          `<div class="abp-v2-main-post-thumbnail">
            <a href="${post.permalink}">
              <img src="${post.thumbnail}" alt="${post.title}" loading="lazy">
            </a>
          </div>` : '';
        
        return `
          <article class="abp-v2-main-post-card">
            ${thumbnailHtml}
            <h3 class="abp-v2-main-post-title">
              <a href="${post.permalink}">${post.title}</a>
            </h3>
            <div class="abp-v2-main-post-excerpt">
              ${post.excerpt}
            </div>
            <div class="abp-v2-main-post-meta">
              <time datetime="${post.date}">${post.date_formatted}</time>
            </div>
          </article>
        `;
      }).join('');
    } else {
      postsGrid.innerHTML = `
        <div class="abp-v2-main-no-posts">
          <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´${data.query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>
        </div>
      `;
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  window.ABP_V2_API = {
    loadPosts,
    updateActiveLetter,
    initializeSearch,
    performSearch,
  };

  // –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  function initializeMainPageAlphabet() {
    const alphabetButtons = document.querySelectorAll('.abp-v2-main-alphabet .abp-v2-letter');
    
    alphabetButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        const letter = this.getAttribute('data-letter');
        if (!letter) return;
        
        // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        alphabetButtons.forEach(btn => btn.classList.remove('is-active'));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
        this.classList.add('is-active');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –±—É–∫–≤—ã
        loadMainPagePosts(letter);
      });
    });
  }
  
  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async function loadMainPagePosts(letter) {
    console.log('Loading posts for letter:', letter);
    
    try {
      const form = new FormData();
      form.append('action', 'abp_v2_fetch_posts');
      form.append('nonce', window.ABP_V2.nonce);
      form.append('letter', letter);
      form.append('page', '1');
      
      const response = await fetch(window.ABP_V2.ajax, {
        method: 'POST',
        body: form
      });
      
      const json = await response.json();
      console.log('AJAX response:', json);
      
      if (json.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const postsHeader = document.querySelector('.abp-v2-main-posts-header h2');
        if (postsHeader) {
          postsHeader.textContent = `–°—Ç–∞—Ç—å–∏ –Ω–∞ –±—É–∫–≤—É ¬´${letter}¬ª`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const postsCount = document.querySelector('.abp-v2-main-posts-count');
        if (postsCount) {
          // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –∏–∑ HTML
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = json.data.html;
          const items = tempDiv.querySelectorAll('.abp-item');
          const count = items.length;
          
          postsCount.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${count} —Å—Ç–∞—Ç–µ–π`;
          console.log('Found articles count:', count);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        const postsGrid = document.querySelector('.abp-v2-main-posts-grid');
        if (postsGrid) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º HTML –≤ —Ñ–æ—Ä–º–∞—Ç –∫–∞—Ä—Ç–æ—á–µ–∫
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = json.data.html;
          
          const items = tempDiv.querySelectorAll('.abp-item');
          const cardsHtml = Array.from(items).map(item => {
            const link = item.querySelector('.abp-link');
            if (!link) return '';
            
            const title = link.textContent;
            const href = link.href;
            const excerpt = item.querySelector('.abp-excerpt') ? 
              item.querySelector('.abp-excerpt').textContent : '';
            const date = item.querySelector('.abp-date') ? 
              item.querySelector('.abp-date').textContent : '';
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
            const thumbnail = item.querySelector('.abp-thumbnail img');
            const thumbnailHtml = thumbnail ? 
              `<div class="abp-v2-main-post-thumbnail">
                <a href="${href}">
                  <img src="${thumbnail.src}" alt="${thumbnail.alt || title}" loading="lazy">
                </a>
              </div>` : '';
            
            return `
              <article class="abp-v2-main-post-card">
                ${thumbnailHtml}
                <h3 class="abp-v2-main-post-title">
                  <a href="${href}">${title}</a>
                </h3>
                <div class="abp-v2-main-post-excerpt">
                  ${excerpt}
                </div>
                <div class="abp-v2-main-post-meta">
                  <time datetime="${date}">${date}</time>
                </div>
              </article>
            `;
          }).join('');
          
          if (cardsHtml) {
            postsGrid.innerHTML = cardsHtml;
            console.log('Updated posts grid with', items.length, 'articles');
          } else {
            postsGrid.innerHTML = `
              <div class="abp-v2-main-no-posts">
                <p>–ù–∞ –±—É–∫–≤—É ¬´${letter}¬ª –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–µ–π.</p>
              </div>
            `;
            console.log('No articles found for letter:', letter);
          }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        const newUrl = `/${window.ABP_V2.slug}2/${encodeURIComponent(letter)}/`;
        window.history.pushState({letter}, '', newUrl);
        
      } else {
        console.error('Error loading posts:', json.data);
      }
    } catch (error) {
      console.error('Error loading posts:', error);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSearch);
  } else {
    initializeSearch();
  }

})();
