<?php
/**
 * –¢–µ—Å—Ç –Ω–æ–≤—ã—Ö API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 * Company Rating Checker - New APIs Test
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º WordPress
require_once('/var/www/bizfin_pro_r_usr/data/www/bizfin-pro.ru/wp-config.php');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω
require_once '/var/www/bizfin_pro_r_usr/data/www/bizfin-pro.ru/wp-content/plugins/company-rating-checker/company-rating-checker.php';

echo "<h2>üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</h2>\n";

$test_inn = '5260482041';

echo "<h3>1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –§–ù–° API:</h3>\n";

try {
    $fns_api = new FNSAPI();
    $fns_data = $fns_api->get_financial_data($test_inn);
    
    if ($fns_data && !is_wp_error($fns_data)) {
        echo "<p style='color: green;'>‚úÖ –§–ù–° API —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
        echo "<p><strong>–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:</strong> " . ($fns_data['api_used'] ? 'API' : '–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π') . "</p>\n";
        
        if (isset($fns_data['revenue'])) {
            echo "<p><strong>–í—ã—Ä—É—á–∫–∞:</strong> " . number_format($fns_data['revenue'], 0, ',', ' ') . " —Ä—É–±.</p>\n";
        }
        
        if (isset($fns_data['profit'])) {
            echo "<p><strong>–ü—Ä–∏–±—ã–ª—å:</strong> " . number_format($fns_data['profit'], 0, ',', ' ') . " —Ä—É–±.</p>\n";
        }
        
        if (isset($fns_data['profitability'])) {
            echo "<p><strong>–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å:</strong> " . round($fns_data['profitability'], 2) . "%</p>\n";
        }
        
        if (isset($fns_data['bankruptcy_risk'])) {
            echo "<p><strong>–†–∏—Å–∫ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞:</strong> " . $fns_data['bankruptcy_risk'] . "</p>\n";
        }
        
        if (isset($fns_data['risk_score'])) {
            echo "<p><strong>–û–±—â–∏–π —Ä–∏—Å–∫:</strong> " . $fns_data['risk_score'] . "/100</p>\n";
        }
        
        if (isset($fns_data['financial_factors'])) {
            echo "<p><strong>–§–∞–∫—Ç–æ—Ä—ã:</strong></p>\n";
            echo "<ul>\n";
            foreach ($fns_data['financial_factors'] as $factor) {
                echo "<li>" . htmlspecialchars($factor) . "</li>\n";
            }
            echo "</ul>\n";
        }
    } else {
        echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –§–ù–° API: " . (is_wp_error($fns_data) ? $fns_data->get_error_message() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>\n";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –§–ù–° API: " . $e->getMessage() . "</p>\n";
}

echo "<h3>2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–æ—Å—Å—Ç–∞—Ç API:</h3>\n";

try {
    $rosstat_api = new RosstatAPI();
    $rosstat_data = $rosstat_api->get_statistical_data($test_inn);
    
    if ($rosstat_data && !is_wp_error($rosstat_data)) {
        echo "<p style='color: green;'>‚úÖ –†–æ—Å—Å—Ç–∞—Ç API —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
        
        if (isset($rosstat_data['region'])) {
            echo "<p><strong>–†–µ–≥–∏–æ–Ω:</strong> " . $rosstat_data['region']['region_name'] . "</p>\n";
            echo "<p><strong>–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> " . round($rosstat_data['region']['statistical_rating'] * 100, 1) . "%</p>\n";
        }
        
        if (isset($rosstat_data['sector'])) {
            echo "<p><strong>–û—Ç—Ä–∞—Å–ª—å:</strong> " . $rosstat_data['sector']['sector_name'] . "</p>\n";
            echo "<p><strong>–û—Ç—Ä–∞—Å–ª–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥:</strong> " . round($rosstat_data['sector']['sector_rating'] * 100, 1) . "%</p>\n";
        }
        
        if (isset($rosstat_data['enterprise_size'])) {
            echo "<p><strong>–†–∞–∑–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è:</strong> " . $rosstat_data['enterprise_size']['size_category'] . "</p>\n";
            echo "<p><strong>–¢–∏–ø:</strong> " . $rosstat_data['enterprise_size']['type'] . "</p>\n";
            if (isset($rosstat_data['enterprise_size']['estimated_employees'])) {
                echo "<p><strong>–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</strong> " . $rosstat_data['enterprise_size']['estimated_employees'] . "</p>\n";
            }
        }
        
        if (isset($rosstat_data['employment'])) {
            echo "<p><strong>–ë–µ–∑—Ä–∞–±–æ—Ç–∏—Ü–∞ –≤ —Ä–µ–≥–∏–æ–Ω–µ:</strong> " . $rosstat_data['employment']['regional_unemployment'] . "%</p>\n";
            echo "<p><strong>–¢—Ä–µ–Ω–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</strong> " . $rosstat_data['employment']['sector_employment_trend'] . "</p>\n";
            echo "<p><strong>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:</strong> " . round($rosstat_data['employment']['employment_stability'] * 100, 1) . "%</p>\n";
        }
    } else {
        echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –†–æ—Å—Å—Ç–∞—Ç API: " . (is_wp_error($rosstat_data) ? $rosstat_data->get_error_message() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</p>\n";
    }
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –†–æ—Å—Å—Ç–∞—Ç API: " . $e->getMessage() . "</p>\n";
}

echo "<h3>3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–ª–∞–≥–∏–Ω–æ–º:</h3>\n";

$plugin = new CompanyRatingChecker();

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ—Ñ–ª–µ–∫—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
$reflection = new ReflectionClass($plugin);

try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –§–ù–° –¥–∞–Ω–Ω—ã—Ö
    $fns_method = $reflection->getMethod('get_fns_data');
    $fns_method->setAccessible(true);
    $fns_result = $fns_method->invoke($plugin, $test_inn);
    
    if ($fns_result) {
        echo "<p style='color: green;'>‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –§–ù–° –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
    } else {
        echo "<p style='color: orange;'>‚ö†Ô∏è –§–ù–° –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)</p>\n";
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –†–æ—Å—Å—Ç–∞—Ç –¥–∞–Ω–Ω—ã—Ö
    $rosstat_method = $reflection->getMethod('get_rosstat_data');
    $rosstat_method->setAccessible(true);
    $rosstat_result = $rosstat_method->invoke($plugin, $test_inn);
    
    if ($rosstat_result) {
        echo "<p style='color: green;'>‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –†–æ—Å—Å—Ç–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç</p>\n";
    } else {
        echo "<p style='color: orange;'>‚ö†Ô∏è –†–æ—Å—Å—Ç–∞—Ç –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö)</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: " . $e->getMessage() . "</p>\n";
}

echo "<h3>4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤:</h3>\n";

try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
    $test_company_data = array(
        'name' => array('full' => '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"'),
        'inn' => $test_inn,
        'state' => array('status' => 'ACTIVE'),
        'fns' => $fns_data ?? null,
        'rosstat' => $rosstat_data ?? null
    );
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –§–ù–° —Ñ–∞–∫—Ç–æ—Ä–∞
    $fns_score_method = $reflection->getMethod('calculate_fns_score');
    $fns_score_method->setAccessible(true);
    $fns_score = $fns_score_method->invoke($plugin, $test_company_data);
    
    echo "<p><strong>–§–ù–° —Ñ–∞–∫—Ç–æ—Ä:</strong> {$fns_score}/15 –±–∞–ª–ª–æ–≤</p>\n";
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –†–æ—Å—Å—Ç–∞—Ç —Ñ–∞–∫—Ç–æ—Ä–∞
    $rosstat_score_method = $reflection->getMethod('calculate_rosstat_score');
    $rosstat_score_method->setAccessible(true);
    $rosstat_score = $rosstat_score_method->invoke($plugin, $test_company_data);
    
    echo "<p><strong>–†–æ—Å—Å—Ç–∞—Ç —Ñ–∞–∫—Ç–æ—Ä:</strong> {$rosstat_score}/10 –±–∞–ª–ª–æ–≤</p>\n";
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
    $fns_desc_method = $reflection->getMethod('get_fns_description');
    $fns_desc_method->setAccessible(true);
    $fns_description = $fns_desc_method->invoke($plugin, $test_company_data);
    
    echo "<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ –§–ù–°:</strong> " . htmlspecialchars($fns_description) . "</p>\n";
    
    $rosstat_desc_method = $reflection->getMethod('get_rosstat_description');
    $rosstat_desc_method->setAccessible(true);
    $rosstat_description = $rosstat_desc_method->invoke($plugin, $test_company_data);
    
    echo "<p><strong>–û–ø–∏—Å–∞–Ω–∏–µ –†–æ—Å—Å—Ç–∞—Ç:</strong> " . htmlspecialchars($rosstat_description) . "</p>\n";
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∞–∫—Ç–æ—Ä–æ–≤: " . $e->getMessage() . "</p>\n";
}

echo "<h3>5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞:</h3>\n";

try {
    // –í–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    update_option('crc_fns_enabled', 1);
    update_option('crc_rosstat_enabled', 1);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    $full_test_data = array(
        'name' => array('full' => '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"'),
        'inn' => $test_inn,
        'state' => array('status' => 'ACTIVE'),
        'fns' => $fns_data ?? null,
        'rosstat' => $rosstat_data ?? null
    );
    
    $rating_method = $reflection->getMethod('calculate_company_rating');
    $rating_method->setAccessible(true);
    $rating = $rating_method->invoke($plugin, $full_test_data);
    
    echo "<p><strong>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª:</strong> {$rating['max_score']}</p>\n";
    echo "<p><strong>–û–±—â–∏–π –±–∞–ª–ª:</strong> {$rating['total_score']}</p>\n";
    echo "<p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ—Ä–æ–≤:</strong> " . count($rating['factors']) . "</p>\n";
    
    echo "<h4>–í—Å–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</h4>\n";
    echo "<ul>\n";
    foreach ($rating['factors'] as $key => $factor) {
        $is_new = in_array($key, ['fns', 'rosstat']);
        $new_badge = $is_new ? ' <span style="background: #007cba; color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px;">–ù–û–í–´–ô</span>' : '';
        echo "<li><strong>{$factor['name']}</strong>{$new_badge}: {$factor['score']}/{$factor['max_score']} - {$factor['description']}</li>\n";
    }
    echo "</ul>\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    if (isset($rating['factors']['fns'])) {
        echo "<p style='color: green;'>‚úÖ –§–∞–∫—Ç–æ—Ä '–§–ù–° –¥–∞–Ω–Ω—ã–µ' –Ω–∞–π–¥–µ–Ω</p>\n";
    } else {
        echo "<p style='color: red;'>‚ùå –§–∞–∫—Ç–æ—Ä '–§–ù–° –¥–∞–Ω–Ω—ã–µ' –ù–ï –Ω–∞–π–¥–µ–Ω</p>\n";
    }
    
    if (isset($rating['factors']['rosstat'])) {
        echo "<p style='color: green;'>‚úÖ –§–∞–∫—Ç–æ—Ä '–†–æ—Å—Å—Ç–∞—Ç –¥–∞–Ω–Ω—ã–µ' –Ω–∞–π–¥–µ–Ω</p>\n";
    } else {
        echo "<p style='color: red;'>‚ùå –§–∞–∫—Ç–æ—Ä '–†–æ—Å—Å—Ç–∞—Ç –¥–∞–Ω–Ω—ã–µ' –ù–ï –Ω–∞–π–¥–µ–Ω</p>\n";
    }
    
} catch (Exception $e) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞: " . $e->getMessage() . "</p>\n";
}

echo "<h3>6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫:</h3>\n";

$settings_to_check = array(
    'crc_fns_enabled',
    'crc_fns_api_key',
    'crc_rosstat_enabled'
);

foreach ($settings_to_check as $setting) {
    $value = get_option($setting);
    echo "<p><strong>{$setting}:</strong> " . var_export($value, true) . "</p>\n";
}

echo "<h3>üéØ –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</h3>\n";
echo "<div style='background: #d4edda; border: 1px solid #c3e6cb; padding: 15px; margin: 10px 0; border-radius: 5px;'>\n";
echo "<h4 style='color: #155724; margin: 0 0 10px 0;'>‚úÖ –ù–æ–≤—ã–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</h4>\n";
echo "<ul style='margin: 0; color: #155724;'>\n";
echo "<li>‚úÖ –§–ù–° API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç</li>\n";
echo "<li>‚úÖ –†–æ—Å—Å—Ç–∞—Ç API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç</li>\n";
echo "<li>‚úÖ –ù–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞</li>\n";
echo "<li>‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</li>\n";
echo "<li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</li>\n";
echo "</ul>\n";
echo "</div>\n";

echo "<h3>üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</h3>\n";
echo "<ol>\n";
echo "<li>–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ—Ü–µ–Ω–∫–∏</li>\n";
echo "<li>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö</li>\n";
echo "</ol>\n";
?>
