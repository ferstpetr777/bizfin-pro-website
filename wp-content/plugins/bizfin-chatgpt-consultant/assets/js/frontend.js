/**
 * BizFin ChatGPT Consultant - Frontend JavaScript
 */

(function($) {
    'use strict';
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    let currentSessionId = '';
    let isTyping = false;
    let typingTimer = null;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    $(document).ready(function() {
        initializeChatInterface();
        setupEventListeners();
    });
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–∞—Ç–∞
     */
    function initializeChatInterface() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —á–∞—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        $('.bcc-chat-container').each(function() {
            const chatId = $(this).attr('id');
            if (chatId) {
                initializeSingleChat(chatId);
            }
        });
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞
     */
    function initializeSingleChat(chatId) {
        const $chat = $('#' + chatId);
        const $input = $chat.find('.bcc-message-input');
        const $sendBtn = $chat.find('.bcc-send-btn');
        const $fileInput = $chat.find('.bcc-file-input');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º session ID
        currentSessionId = getSessionId(chatId);
        
        // –°—Ç–∞—Ä—Ç—É–µ–º –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
        $chat.addClass('bcc-collapsed');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
        $input.on('input', function() {
            autoResizeTextarea($(this));
        });
        
        // –ü–µ—Ä–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —á–∞—Ç
        $input.on('focus', function() {
            $chat.removeClass('bcc-collapsed');
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        $input.on('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(chatId);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        if ($fileInput.length) {
            $fileInput.on('change', function(e) {
                handleFileUpload(chatId, e.target.files);
            });
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        loadChatHistory(chatId);
        
        // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        $input.focus();
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    function setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        $(document).on('click', '.bcc-send-btn', function() {
            const chatId = $(this).closest('.bcc-chat-container').attr('id');
            if (chatId) {
                sendMessage(chatId);
            }
        });
        
        // –ö–ª–∏–∫ –ø–æ —à–∞–ø–∫–µ —á–∞—Ç–∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ
        $(document).on('click', '.bcc-chat-header', function() {
            const $c = $(this).closest('.bcc-chat-container');
            $c.removeClass('bcc-collapsed');
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        $(document).on('click', '.bcc-attach-btn', function() {
            const chatId = $(this).closest('.bcc-chat-container').attr('id');
            if (chatId) {
                toggleFileUpload(chatId);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        $(document).on('click', '.bcc-file-remove', function() {
            $(this).closest('.bcc-file-item').remove();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ drag & drop –¥–ª—è —Ñ–∞–π–ª–æ–≤
        $(document).on('dragover', '.bcc-chat-container', function(e) {
            e.preventDefault();
            $(this).addClass('bcc-drag-over');
        });
        
        $(document).on('dragleave', '.bcc-chat-container', function(e) {
            e.preventDefault();
            $(this).removeClass('bcc-drag-over');
        });
        
        $(document).on('drop', '.bcc-chat-container', function(e) {
            e.preventDefault();
            $(this).removeClass('bcc-drag-over');
            
            const chatId = $(this).attr('id');
            const files = e.originalEvent.dataTransfer.files;
            
            if (chatId && files.length > 0) {
                handleFileUpload(chatId, files);
            }
        });
    }
    
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
     */
    function autoResizeTextarea($textarea) {
        $textarea.css('height', 'auto');
        const newHeight = Math.min($textarea[0].scrollHeight, 120);
        $textarea.css('height', newHeight + 'px');
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    function sendMessage(chatId) {
        const $chat = $('#' + chatId);
        const $input = $chat.find('.bcc-message-input');
        const $sendBtn = $chat.find('.bcc-send-btn');
        const message = $input.val().trim();
        
        if (!message) {
            return;
        }
        
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–∞—Ç –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        $chat.removeClass('bcc-collapsed');
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        addMessageToChat(chatId, message, 'user');
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        $input.val('');
        $input.css('height', 'auto');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        showLoadingIndicator(chatId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å
        $.ajax({
            url: bcc_ajax.ajax_url,
            type: 'POST',
            data: {
                action: 'bcc_send_message',
                nonce: bcc_ajax.nonce,
                message: message,
                session_id: currentSessionId
            },
            timeout: 60000, // 60 —Å–µ–∫—É–Ω–¥
            success: function(response) {
                hideLoadingIndicator(chatId);
                
                if (response.success) {
                    addMessageToChat(chatId, response.data.response, 'assistant');
                    updateSessionId(chatId, response.data.session_id);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                    if (response.data.tokens_used) {
                        updateTokenUsage(response.data.tokens_used);
                    }
                } else {
                    addMessageToChat(chatId, response.data.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant', true);
                }
            },
            error: function(xhr, status, error) {
                hideLoadingIndicator(chatId);
                
                let errorMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
                
                if (status === 'timeout') {
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
                } else if (xhr.responseJSON && xhr.responseJSON.data && xhr.responseJSON.data.message) {
                    errorMessage = xhr.responseJSON.data.message;
                }
                
                addMessageToChat(chatId, errorMessage, 'assistant', true);
            }
        });
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
     */
    function addMessageToChat(chatId, message, type, isError = false) {
        const $chat = $('#' + chatId);
        const $messagesContainer = $chat.find('.bcc-chat-messages');
        
        // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        $messagesContainer.find('.bcc-welcome-message').remove();
        
        const messageHtml = createMessageHtml(message, type, isError);
        $messagesContainer.append(messageHtml);
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        scrollToBottom($messagesContainer);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        $messagesContainer.find('.bcc-message').last().hide().fadeIn(300);
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ HTML –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    function createMessageHtml(message, type, isError = false) {
        const time = new Date().toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
        
        const avatar = type === 'user' ? 'üë§' : getAgentInitial();
        const messageClass = `bcc-message bcc-message-${type}`;
        const errorClass = isError ? ' bcc-message-error' : '';
        
        // –ì–æ—Ç–æ–≤–∏–º HTML –±–µ–∑–æ–ø–∞—Å–Ω–æ: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤ –∞–±–∑–∞—Ü—ã/–±—Ä–µ–π–∫–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å–ø–∏—Å–∫–∏/markdown
        const formattedHtml = formatMessageHtml(message);

        return `
            <div class="${messageClass}${errorClass}">
                <div class="bcc-message-avatar">
                    <span class="bcc-avatar">${avatar}</span>
                </div>
                <div class="bcc-message-content">
                    <div class="bcc-message-text">${formattedHtml}</div>
                    <div class="bcc-message-time">${time}</div>
                </div>
            </div>
        `;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML
     * - –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML
     * - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ –∞–±–∑–∞—Ü—ã
     * - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –≤ <br>
     * - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Ä–∫–µ—Ä—ã —Å–ø–∏—Å–∫–∞ ("- ", "‚Ä¢ ", "* ") –∏ "1. " –≤ —Å–ø–∏—Å–∫–∏
     * - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π Markdown (**–∂–∏—Ä–Ω—ã–π**, *–∫—É—Ä—Å–∏–≤*, `code`)
     */
    function formatMessageHtml(text) {
        const escaped = escapeHtml(String(text || ''));

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        const lines = escaped.split(/\r?\n/);

        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–∫–∏ –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
        let htmlParts = [];
        let listBuffer = [];
        let listOrdered = false;

        const flushList = () => {
            if (listBuffer.length) {
                const tag = listOrdered ? 'ol' : 'ul';
                htmlParts.push('<' + tag + ' class="bcc-message-list">' + listBuffer.map(li => `<li>${li}</li>`).join('') + '</' + tag + '>');
                listBuffer = [];
                listOrdered = false;
            }
        };

        lines.forEach(line => {
            const trimmed = line.trim();

            // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤/–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
            if (trimmed === '') {
                flushList();
                htmlParts.push('<p></p>');
                return;
            }

            // –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
            if (/^(?:[-‚Ä¢*])\s+/.test(trimmed)) {
                const item = applyBasicMarkdown(trimmed.replace(/^(?:[-‚Ä¢*])\s+/, ''));
                listBuffer.push(item);
                listOrdered = false;
                return;
            }

            // –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: 1. –ø—É–Ω–∫—Ç
            const orderedMatch = trimmed.match(/^(\d+)\.\s+(.*)$/);
            if (orderedMatch) {
                const item = applyBasicMarkdown(orderedMatch[2]);
                listBuffer.push(item);
                listOrdered = true;
                return;
            }

            // –û–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞
            flushList();
            htmlParts.push(`<p>${applyBasicMarkdown(trimmed)}</p>`);
        });

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Ö–≤–æ—Å—Ç —Å–ø–∏—Å–∫–∞
        flushList();

        // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–±—Ä–∞–ª–∏ (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ) ‚Äî –≤–µ—Ä–Ω–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å <br>
        if (!htmlParts.length) {
            return escaped.replace(/\n/g, '<br>');
        }

        // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –ø—É—Å—Ç—ã–µ <p></p>
        const compact = htmlParts
            .join('')
            .replace(/(?:<p><\/p>\s*){2,}/g, '<p></p>');

        return compact;
    }

    // –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ markdown –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ/–∫—É—Ä—Å–∏–≤–∞ –∏ –∏–Ω–ª–∞–π–Ω-–∫–æ–¥–∞
    function applyBasicMarkdown(safeHtml) {
        let html = safeHtml;
        // **bold**
        html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1<\/strong>');
        // *italic*
        html = html.replace(/(^|\s)\*(?!\s)([^*]+?)\*(?=\s|$)/g, '$1<em>$2<\/em>');
        // `code`
        html = html.replace(/`([^`]+)`/g, '<code>$1<\/code>');
        return html;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function showLoadingIndicator(chatId) {
        const $chat = $('#' + chatId);
        const $loadingIndicator = $chat.find('.bcc-loading-indicator');
        const $sendBtn = $chat.find('.bcc-send-btn');
        
        $loadingIndicator.show();
        $sendBtn.prop('disabled', true);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateChatStatus(chatId, 'typing');
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function hideLoadingIndicator(chatId) {
        const $chat = $('#' + chatId);
        const $loadingIndicator = $chat.find('.bcc-loading-indicator');
        const $sendBtn = $chat.find('.bcc-send-btn');
        
        $loadingIndicator.hide();
        $sendBtn.prop('disabled', false);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        updateChatStatus(chatId, 'online');
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
     */
    function updateChatStatus(chatId, status) {
        const $chat = $('#' + chatId);
        const $statusIndicator = $chat.find('.bcc-status-indicator');
        const $statusText = $chat.find('.bcc-status-text');
        
        const statusMap = {
            'online': { color: '#4ade80', text: '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ' },
            'typing': { color: '#f59e0b', text: '–ü–µ—á–∞—Ç–∞–µ—Ç...' },
            'offline': { color: '#ef4444', text: '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' }
        };
        
        const statusInfo = statusMap[status] || statusMap['offline'];
        
        $statusIndicator.css('color', statusInfo.color);
        $statusText.text(statusInfo.text);
    }
    
    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    function toggleFileUpload(chatId) {
        const $chat = $('#' + chatId);
        const $fileArea = $chat.find('.bcc-file-upload-area');
        
        $fileArea.slideToggle(200);
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
     */
    function handleFileUpload(chatId, files) {
        const $chat = $('#' + chatId);
        const $fileList = $chat.find('.bcc-file-list');
        const maxFiles = parseInt($chat.data('max-files') || 5);
        
        if (files.length > maxFiles) {
            showNotification(`–ú–∞–∫—Å–∏–º—É–º ${maxFiles} —Ñ–∞–π–ª–æ–≤`, 'error');
            return;
        }
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
        $fileList.empty();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–ø–∏—Å–æ–∫
        Array.from(files).forEach(file => {
            if (validateFile(file)) {
                addFileToList($fileList, file);
            }
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ñ–∞–π–ª–æ–≤
        $chat.find('.bcc-file-upload-area').show();
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
     */
    function validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'application/pdf', 
                             'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                             'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
        
        const maxSize = 10 * 1024 * 1024; // 10MB
        
        if (!allowedTypes.includes(file.type)) {
            showNotification(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.name}`, 'error');
            return false;
        }
        
        if (file.size > maxSize) {
            showNotification(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.name}`, 'error');
            return false;
        }
        
        return true;
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å–ø–∏—Å–æ–∫
     */
    function addFileToList($fileList, file) {
        const fileItem = $(`
            <div class="bcc-file-item">
                <span class="bcc-file-name">${escapeHtml(file.name)}</span>
                <span class="bcc-file-size">${formatFileSize(file.size)}</span>
                <button type="button" class="bcc-file-remove" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª">√ó</button>
            </div>
        `);
        
        $fileList.append(fileItem);
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
     */
    function loadChatHistory(chatId) {
        if (!currentSessionId) {
            return;
        }
        
        $.ajax({
            url: bcc_ajax.ajax_url,
            type: 'POST',
            data: {
                action: 'bcc_get_chat_history',
                nonce: bcc_ajax.nonce,
                session_id: currentSessionId
            },
            success: function(response) {
                if (response.success && response.data.length > 0) {
                    const $chat = $('#' + chatId);
                    const $messagesContainer = $chat.find('.bcc-chat-messages');
                    
                    // –£–¥–∞–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    $messagesContainer.find('.bcc-welcome-message').remove();
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    response.data.forEach(message => {
                        const messageHtml = createMessageHtml(message.content, message.type);
                        $messagesContainer.append(messageHtml);
                    });
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    scrollToBottom($messagesContainer);
                }
            },
            error: function() {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            }
        });
    }
    
    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∏–∑—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     */
    function scrollToBottom($container) {
        $container.animate({
            scrollTop: $container[0].scrollHeight
        }, 300);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ session ID
     */
    function getSessionId(chatId) {
        return localStorage.getItem('bcc_session_' + chatId) || '';
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ session ID
     */
    function updateSessionId(chatId, sessionId) {
        currentSessionId = sessionId;
        localStorage.setItem('bcc_session_' + chatId, sessionId);
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∞ –∞–≥–µ–Ω—Ç–∞
     */
    function getAgentInitial() {
        // –ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return '–ê';
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    function showNotification(message, type = 'info') {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = $(`
            <div class="bcc-notification bcc-notification-${type}">
                <span class="bcc-notification-message">${escapeHtml(message)}</span>
                <button type="button" class="bcc-notification-close">√ó</button>
            </div>
        `);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!$('#bcc-notification-styles').length) {
            $('head').append(`
                <style id="bcc-notification-styles">
                    .bcc-notification {
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        background: white;
                        border: 1px solid #e5e7eb;
                        border-radius: 8px;
                        padding: 16px 20px;
                        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                        z-index: 10000;
                        display: flex;
                        align-items: center;
                        gap: 12px;
                        max-width: 400px;
                        animation: slideInRight 0.3s ease-out;
                    }
                    .bcc-notification-success {
                        border-left: 4px solid #10b981;
                    }
                    .bcc-notification-error {
                        border-left: 4px solid #ef4444;
                    }
                    .bcc-notification-warning {
                        border-left: 4px solid #f59e0b;
                    }
                    .bcc-notification-info {
                        border-left: 4px solid #3b82f6;
                    }
                    .bcc-notification-close {
                        background: none;
                        border: none;
                        font-size: 18px;
                        cursor: pointer;
                        color: #6b7280;
                        padding: 0;
                        width: 20px;
                        height: 20px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    .bcc-notification-close:hover {
                        color: #374151;
                    }
                    @keyframes slideInRight {
                        from {
                            transform: translateX(100%);
                            opacity: 0;
                        }
                        to {
                            transform: translateX(0);
                            opacity: 1;
                        }
                    }
                </style>
            `);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        $('body').append(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.fadeOut(300, function() {
                $(this).remove();
            });
        }, 5000);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        notification.find('.bcc-notification-close').on('click', function() {
            notification.fadeOut(300, function() {
                $(this).remove();
            });
        });
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
     */
    function updateTokenUsage(tokens) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        console.log('Tokens used:', tokens);
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    window.BizFinChatGPT = {
        sendMessage: sendMessage,
        addMessageToChat: addMessageToChat,
        showNotification: showNotification,
        formatFileSize: formatFileSize
    };
    
})(jQuery);
