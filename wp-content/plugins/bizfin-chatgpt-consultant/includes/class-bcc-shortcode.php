<?php
/**
 * –ö–ª–∞—Å—Å –¥–ª—è —à–æ—Ä—Ç–∫–æ–¥–∞
 */

if (!defined('ABSPATH')) {
    exit;
}

class BCC_Shortcode {
    
    private $logger;
    
    public function __construct() {
        // –õ–æ–≥–≥–µ—Ä –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ init()
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
     */
    public function init() {
        $this->logger = bizfin_chatgpt_consultant()->get_logger();
        
        add_shortcode('bizfin_chatgpt', [$this, 'render_chat_shortcode']);
        add_shortcode('bizfin_chatgpt_consultant', [$this, 'render_chat_shortcode']); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        add_action('wp_enqueue_scripts', [$this, 'enqueue_scripts']);
        
        $this->logger->info('BCC_Shortcode initialized');
    }
    
    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
     */
    public function enqueue_scripts() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Elementor
        $this->load_scripts_and_styles();
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
     */
    public function load_scripts_and_styles() {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏
        wp_enqueue_style(
            'bcc-frontend-css',
            BCC_PLUGIN_URL . 'assets/css/frontend.css',
            [],
            BCC_VERSION
        );
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
        wp_enqueue_script('jquery');
        wp_enqueue_script(
            'bcc-frontend-js',
            BCC_PLUGIN_URL . 'assets/js/frontend.js',
            ['jquery'],
            BCC_VERSION,
            true
        );
        
        // –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è AJAX
        wp_localize_script('bcc-frontend-js', 'bcc_ajax', [
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('bcc_nonce'),
            'agent_name' => get_option('bcc_agent_name', BCC_DEFAULT_AGENT_NAME),
        ]);
    }
    
    /**
     * –†–µ–Ω–¥–µ—Ä —à–æ—Ä—Ç–∫–æ–¥–∞ —á–∞—Ç–∞
     */
    public function render_chat_shortcode($atts) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
        $this->load_scripts_and_styles();
        
        $atts = shortcode_atts([
            'title' => '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—è–º',
            'subtitle' => '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É AI-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É',
            'placeholder' => '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö...',
            'button_text' => '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
            'theme' => 'light', // light, dark
            'height' => '600px',
            'width' => '100%',
            'show_files' => 'true',
            'show_history' => 'true',
            'max_files' => '5',
        ], $atts);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        $show_files = get_option('bcc_enable_file_processing', true) && $atts['show_files'] === 'true';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–∞—Ç–∞
        $chat_id = 'bcc-chat-' . uniqid();
        
        ob_start();
        ?>
        <div id="<?php echo esc_attr($chat_id); ?>" class="bcc-chat-container bcc-collapsed" data-theme="<?php echo esc_attr($atts['theme']); ?>" style="height: <?php echo esc_attr($atts['height']); ?>; width: <?php echo esc_attr($atts['width']); ?>;">
            
            <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ -->
            <div class="bcc-chat-header" onclick="expandChat('<?php echo esc_attr($chat_id); ?>')">
                <div class="bcc-chat-title">
                    <h3><?php echo esc_html($atts['title']); ?></h3>
                    <p><?php echo esc_html($atts['subtitle']); ?></p>
                </div>
                <div class="bcc-chat-status">
                    <span class="bcc-status-indicator" id="bcc-status-<?php echo esc_attr($chat_id); ?>">‚óè</span>
                    <span class="bcc-status-text">–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ</span>
                </div>
            </div>
            
            <!-- –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π -->
            <div class="bcc-chat-messages" id="bcc-messages-<?php echo esc_attr($chat_id); ?>">
                <div class="bcc-welcome-message">
                    <div class="bcc-message bcc-message-assistant">
                        <div class="bcc-message-avatar">
                            <span class="bcc-avatar"><?php echo esc_html(substr(get_option('bcc_agent_name', BCC_DEFAULT_AGENT_NAME), 0, 1)); ?></span>
                        </div>
                        <div class="bcc-message-content">
                            <div class="bcc-message-text">
                                –ü—Ä–∏–≤–µ—Ç! –Ø <?php echo esc_html(get_option('bcc_agent_name', BCC_DEFAULT_AGENT_NAME)); ?>, –≤–∞—à –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –≥–∞—Ä–∞–Ω—Ç–∏—è–º. 
                                –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç–∏—è—Ö, –∏—Ö –≤–∏–¥–∞—Ö, —É—Å–ª–æ–≤–∏—è—Ö –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
                            </div>
                            <div class="bcc-message-time"><?php echo current_time('H:i'); ?></div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ -->
            <div class="bcc-chat-input-area">
                
                <!-- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ -->
                <?php if ($show_files): ?>
                <div class="bcc-file-upload-area" id="bcc-files-<?php echo esc_attr($chat_id); ?>" style="display: none;">
                    <div class="bcc-file-list" id="bcc-file-list-<?php echo esc_attr($chat_id); ?>"></div>
                    <div class="bcc-file-upload-controls">
                        <input type="file" id="bcc-file-input-<?php echo esc_attr($chat_id); ?>" multiple accept=".jpg,.jpeg,.png,.gif,.pdf,.doc,.docx,.xls,.xlsx" style="display: none;">
                        <button type="button" class="bcc-file-upload-btn" onclick="document.getElementById('bcc-file-input-<?php echo esc_attr($chat_id); ?>').click();">
                            üìé –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã
                        </button>
                        <span class="bcc-file-info">–ú–∞–∫—Å–∏–º—É–º <?php echo esc_html($atts['max_files']); ?> —Ñ–∞–π–ª–æ–≤</span>
                    </div>
                </div>
                <?php endif; ?>
                
                <!-- –ü–æ–ª–µ –≤–≤–æ–¥–∞ -->
                <div class="bcc-input-container">
                    <div class="bcc-input-wrapper">
                        <textarea 
                            id="bcc-input-<?php echo esc_attr($chat_id); ?>" 
                            class="bcc-message-input" 
                            placeholder="<?php echo esc_attr($atts['placeholder']); ?>"
                            rows="1"
                        ></textarea>
                        
                        <div class="bcc-input-actions">
                            <?php if ($show_files): ?>
                            <button type="button" class="bcc-attach-btn" onclick="toggleFileUpload('<?php echo esc_attr($chat_id); ?>')" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
                                üìé
                            </button>
                            <?php endif; ?>
                            
                            <button type="button" class="bcc-send-btn" id="bcc-send-<?php echo esc_attr($chat_id); ?>" onclick="sendMessage('<?php echo esc_attr($chat_id); ?>')">
                                <span class="bcc-send-text"><?php echo esc_html($atts['button_text']); ?></span>
                                <span class="bcc-send-icon">‚û§</span>
                            </button>
                        </div>
                    </div>
                </div>
                
            </div>
            
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div class="bcc-loading-indicator" id="bcc-loading-<?php echo esc_attr($chat_id); ?>" style="display: none;">
                <div class="bcc-typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <span class="bcc-loading-text"><?php echo esc_html(get_option('bcc_agent_name', BCC_DEFAULT_AGENT_NAME)); ?> –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
            </div>
        </div>
        
        <script>
        jQuery(document).ready(function($) {
            initializeChat('<?php echo esc_attr($chat_id); ?>');
        });
        
        function initializeChat(chatId) {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–≤–µ—Ä–Ω—É—Ç ‚Äî —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –≤ –ø–æ–ª–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            const container = document.getElementById(chatId);
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
            const textarea = document.getElementById('bcc-input-' + chatId);
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = Math.min(this.scrollHeight, 120) + 'px';
            });
            textarea.addEventListener('focus', function(){
                if (container.classList.contains('bcc-collapsed')) {
                    expandChat(chatId);
                }
            });
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ Enter (Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
            textarea.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    if (container.classList.contains('bcc-collapsed')) {
                        expandChat(chatId);
                    }
                    sendMessage(chatId);
                }
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
            const fileInput = document.getElementById('bcc-file-input-' + chatId);
            if (fileInput) {
                fileInput.addEventListener('change', function(e) {
                    handleFileUpload(chatId, e.target.files);
                });
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            loadChatHistory(chatId);
        }
        
        function sendMessage(chatId) {
            const input = document.getElementById('bcc-input-' + chatId);
            const message = input.value.trim();
            
            if (!message) return;
            const container = document.getElementById(chatId);
            if (container.classList.contains('bcc-collapsed')) {
                expandChat(chatId);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            addMessageToChat(chatId, message, 'user');
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            input.value = '';
            input.style.height = 'auto';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            showLoadingIndicator(chatId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AJAX –∑–∞–ø—Ä–æ—Å
            jQuery.post(bcc_ajax.ajax_url, {
                action: 'bcc_send_message',
                nonce: bcc_ajax.nonce,
                message: message,
                session_id: getSessionId(chatId)
            }, function(response) {
                hideLoadingIndicator(chatId);
                
                if (response.success) {
                    addMessageToChat(chatId, response.data.response, 'assistant');
                    updateSessionId(chatId, response.data.session_id);
                } else {
                    addMessageToChat(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', 'assistant', true);
                }
            }).fail(function() {
                hideLoadingIndicator(chatId);
                addMessageToChat(chatId, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.', 'assistant', true);
            });
        }

        function expandChat(chatId){
            const el = document.getElementById(chatId);
            if (!el) return;
            el.classList.remove('bcc-collapsed');
        }
        
        function addMessageToChat(chatId, message, type, isError = false) {
            const messagesContainer = document.getElementById('bcc-messages-' + chatId);
            const messageDiv = document.createElement('div');
            messageDiv.className = 'bcc-message bcc-message-' + type + (isError ? ' bcc-message-error' : '');
            
            const avatar = type === 'user' ? 'üë§' : '<?php echo esc_html(substr(get_option('bcc_agent_name', BCC_DEFAULT_AGENT_NAME), 0, 1)); ?>';
            const time = new Date().toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'});
            
            const formatted = formatMessageHtml(message);
            messageDiv.innerHTML = `
                <div class="bcc-message-avatar">
                    <span class="bcc-avatar">${avatar}</span>
                </div>
                <div class="bcc-message-content">
                    <div class="bcc-message-text">${formatted}</div>
                    <div class="bcc-message-time">${time}</div>
                </div>
            `;
            
            messagesContainer.appendChild(messageDiv);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
        
        function showLoadingIndicator(chatId) {
            document.getElementById('bcc-loading-' + chatId).style.display = 'block';
            document.getElementById('bcc-send-' + chatId).disabled = true;
        }
        
        function hideLoadingIndicator(chatId) {
            document.getElementById('bcc-loading-' + chatId).style.display = 'none';
            document.getElementById('bcc-send-' + chatId).disabled = false;
        }
        
        function toggleFileUpload(chatId) {
            const fileArea = document.getElementById('bcc-files-' + chatId);
            if (fileArea.style.display === 'none') {
                fileArea.style.display = 'block';
            } else {
                fileArea.style.display = 'none';
            }
        }
        
        function handleFileUpload(chatId, files) {
            const maxFiles = <?php echo intval($atts['max_files']); ?>;
            const fileList = document.getElementById('bcc-file-list-' + chatId);
            
            if (files.length > maxFiles) {
                alert('–ú–∞–∫—Å–∏–º—É–º ' + maxFiles + ' —Ñ–∞–π–ª–æ–≤');
                return;
            }
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            fileList.innerHTML = '';
            for (let i = 0; i < files.length; i++) {
                const fileItem = document.createElement('div');
                fileItem.className = 'bcc-file-item';
                fileItem.innerHTML = `
                    <span class="bcc-file-name">${files[i].name}</span>
                    <span class="bcc-file-size">${formatFileSize(files[i].size)}</span>
                    <button type="button" class="bcc-file-remove" onclick="removeFile(this)">√ó</button>
                `;
                fileList.appendChild(fileItem);
            }
        }
        
        function removeFile(button) {
            button.parentElement.remove();
        }
        
        function getSessionId(chatId) {
            return localStorage.getItem('bcc_session_' + chatId) || '';
        }
        
        function updateSessionId(chatId, sessionId) {
            localStorage.setItem('bcc_session_' + chatId, sessionId);
        }
        
        function loadChatHistory(chatId) {
            const sessionId = getSessionId(chatId);
            if (!sessionId) return;
            
            jQuery.post(bcc_ajax.ajax_url, {
                action: 'bcc_get_chat_history',
                nonce: bcc_ajax.nonce,
                session_id: sessionId
            }, function(response) {
                if (response.success && response.data.length > 0) {
                    const messagesContainer = document.getElementById('bcc-messages-' + chatId);
                    const welcomeMessage = messagesContainer.querySelector('.bcc-welcome-message');
                    if (welcomeMessage) {
                        welcomeMessage.remove();
                    }
                    
                    response.data.forEach(function(message) {
                        addMessageToChat(chatId, message.content, message.type);
                    });
                }
            });
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –±–∞–∑–æ–≤—ã–π markdown
        function formatMessageHtml(text) {
            const escaped = escapeHtml(String(text || ''));
            const lines = escaped.split(/\r?\n/);
            let htmlParts = [];
            let listBuffer = [];
            let listOrdered = false;
            const flushList = () => {
                if (listBuffer.length) {
                    const tag = listOrdered ? 'ol' : 'ul';
                    htmlParts.push('<' + tag + ' class="bcc-message-list">' + listBuffer.map(li => `<li>${li}</li>`).join('') + '</' + tag + '>');
                    listBuffer = [];
                    listOrdered = false;
                }
            };
            lines.forEach(line => {
                const trimmed = line.trim();
                if (trimmed === '') { flushList(); htmlParts.push('<p></p>'); return; }
                if (/^(?:[-‚Ä¢*])\s+/.test(trimmed)) { listBuffer.push(applyBasicMarkdown(trimmed.replace(/^(?:[-‚Ä¢*])\s+/, ''))); listOrdered = false; return; }
                const orderedMatch = trimmed.match(/^(\d+)\.\s+(.*)$/);
                if (orderedMatch) { listBuffer.push(applyBasicMarkdown(orderedMatch[2])); listOrdered = true; return; }
                flushList();
                htmlParts.push(`<p>${applyBasicMarkdown(trimmed)}</p>`);
            });
            flushList();
            if (!htmlParts.length) return escaped.replace(/\n/g, '<br>');
            return htmlParts.join('').replace(/(?:<p><\/p>\s*){2,}/g, '<p></p>');
        }
        
        function applyBasicMarkdown(safeHtml) {
            let html = safeHtml;
            html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1<\/strong>');
            html = html.replace(/(^|\s)\*(?!\s)([^*]+?)\*(?=\s|$)/g, '$1<em>$2<\/em>');
            html = html.replace(/`([^`]+)`/g, '<code>$1<\/code>');
            return html;
        }
        
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        </script>
        <?php
        
        return ob_get_clean();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
     */
    private function format_file_size($bytes) {
        if ($bytes === 0) return '0 Bytes';
        $k = 1024;
        $sizes = ['Bytes', 'KB', 'MB', 'GB'];
        $i = floor(log($bytes) / log($k));
        return round($bytes / pow($k, $i), 2) . ' ' . $sizes[$i];
    }
}
