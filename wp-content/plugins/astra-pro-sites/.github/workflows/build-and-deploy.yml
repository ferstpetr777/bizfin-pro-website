name: Build and Deploy

# Run the deployment only when code is committed to the branch.
on:
  push:
    branches:
      - release-candidate
      - dev

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

# Set the environment variables for the deployment..
jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
          node: ['18.15']
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.PRIVATE_ACCESS_TOKEN }}

    - name: Use desired version of NodeJS
      uses: actions/setup-node@v2
      with:
          node-version: ${{ matrix.node }}

    - name: Cache NPM packages
      uses: actions/cache@v4
      with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node }}-npm-cache-${{ hashFiles('**/package-lock.json') }}

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
          php-version: '8.0'
          coverage: none
          tools: composer, cs2pr, phpcs

    - name: Install dependencies
      run: npm install

    - name: Set environment name
      run: |
          if [ '${{github.ref}}' = 'refs/heads/release-candidate' ]
          then
            echo "ENVIRONMENT=RELEASE_CANDIDATE" >> $GITHUB_ENV
          fi
          if [ '${{github.ref}}' = 'refs/heads/dev' ]
          then
            echo "ENVIRONMENT=DEVELOPMENT" >> $GITHUB_ENV
          fi

    - name: Create a build
      run: npm run build-package && grunt release-no-clean

    - name: Rsync Deployment
      uses: burnett01/rsync-deployments@4.1
      with:
        switches: -avzr --delete
        path: astra-pro-sites/
        remote_path: ${{ secrets[format('SSH_PATH_{0}', env.ENVIRONMENT)] }}
        remote_host: ${{ secrets[format('SSH_HOST_{0}', env.ENVIRONMENT)] }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Cleanup
      run: rm -rf astra-pro-sites/
