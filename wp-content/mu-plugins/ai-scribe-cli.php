<?php
/*
Plugin Name: AI Scribe CLI Bridge
Description: Adds WP-CLI commands to drive AI-Scribe generation from terminal.
*/

if (defined('WP_CLI') && WP_CLI) {
    /**
     * AI-Scribe related commands.
     */
    class AIScribe_CLI {
        /**
         * Generate an article via AI‑Scribe and create a draft post.
         *
         * ## OPTIONS
         *
         * --title=<title>
         * : Desired article title.
         *
         * [--keywords=<csv>]
         * : Comma-separated keywords.
         *
         * [--model=<model>]
         * : Engine model (defaults to saved plugin setting).
         *
         * ## EXAMPLES
         *
         * wp ai-scribe generate --title="Test Post" --keywords="финансы, гарантии"
         */
        public function generate($args, $assoc_args) {
            // Ensure we run as an admin user (first administrator found)
            if (!function_exists('wp_set_current_user')) {
                require_once ABSPATH . WPINC . '/pluggable.php';
            }
            $admin = get_users(['role' => 'administrator','number' => 1]);
            if (!empty($admin)) {
                wp_set_current_user($admin[0]->ID);
            }

            $title = isset($assoc_args['title']) ? sanitize_text_field($assoc_args['title']) : '';
            if ($title === '') {
                WP_CLI::error('Missing --title');
            }
            $keywords_csv = isset($assoc_args['keywords']) ? $assoc_args['keywords'] : '';
            $keywords = array_filter(array_map('trim', explode(',', $keywords_csv)));

            // Minimal article body from title/keywords to feed into send_post_page
            $h1 = '<h1>' . esc_html($title) . '</h1>';
            $body = $h1 . "\n<p>Вступление: autogenerated.</p>\n<h2>Основной текст</h2>\n<p>Контент будет дополнен через UI.</p>";

            // Prepare POST like plugin expects
            $_POST['security'] = wp_create_nonce('ai_scribe_nonce');
            $_POST['headingData'] = $keywords ?: [$title];
            $_POST['keywordData'] = $keywords;
            $_POST['introData'] = [$title];
            $_POST['taglineData'] = [];
            $_POST['conclusionData'] = [];
            $_POST['qnaData'] = [];
            $_POST['metaData'] = [];
            $_POST['titleData'] = $title;
            $_POST['articleVal'] = $body;
            $_POST['humanizeValue'] = '';
            $_POST['generator_model'] = isset($assoc_args['model']) ? sanitize_text_field($assoc_args['model']) : '';

            // Call the plugin handler directly
            if (!class_exists('AI_Scribe')) {
                WP_CLI::error('AI_Scribe plugin class not loaded.');
            }
            global $ai_scribe_instance;
            if (!$ai_scribe_instance instanceof AI_Scribe) {
                // Find the global instance by triggering init if needed
                do_action('init');
                if (!$ai_scribe_instance instanceof AI_Scribe) {
                    // Fallback: try creating a lightweight instance (handlers don\'t rely on constructor side effects)
                    $ai_scribe_instance = new AI_Scribe();
                }
            }

            ob_start();
            $ai_scribe_instance->send_post_page();
            $json = ob_get_clean();
            $resp = json_decode($json, true);
            if (!$resp || empty($resp['success'])) {
                WP_CLI::error('Generation failed: ' . ($json ?: 'no response'));
            }

            $post_id = isset($resp['data']['post_id']) ? intval($resp['data']['post_id']) : 0;
            if ($post_id <= 0) {
                WP_CLI::error('Post ID missing in response: ' . $json);
            }
            $url = get_permalink($post_id);
            WP_CLI::success("Draft created: #$post_id -> $url");
            WP_CLI::log($json);
        }
    }

    WP_CLI::add_command('ai-scribe', 'AIScribe_CLI');
}


