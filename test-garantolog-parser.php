<?php
/**
 * Test Script: Garantolog.ru Parser Test
 * Description: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å garantolog.ru/kalkulyator-garantii/
 * Version:     1.0.0
 * Author:      AI Assistant
 */

// Load WordPress environment
require_once('wp-load.php');

echo "<h1>üîç –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ Garantolog.ru</h1>";

// Test URL
$url = 'https://garantolog.ru/kalkulyator-garantii/';

echo "<h2>1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ garantolog.ru</h2>";
echo "<p>URL: <a href='" . esc_url($url) . "' target='_blank'>" . esc_html($url) . "</a></p>";

$response = wp_remote_get($url, [
    'timeout' => 30,
    'headers' => [
        'User-Agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language' => 'ru-RU,ru;q=0.9,en;q=0.8',
        'Accept-Encoding' => 'gzip, deflate, br',
        'Connection' => 'keep-alive',
        'Upgrade-Insecure-Requests' => '1'
    ]
]);

if (is_wp_error($response)) {
    echo "<p style='color: red;'>‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: " . esc_html($response->get_error_message()) . "</p>";
    exit;
}

$html = wp_remote_retrieve_body($response);
$status_code = wp_remote_retrieve_response_code($response);

echo "<p style='color: green;'>‚úÖ HTTP –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: " . $status_code . ")</p>";
echo "<p>–†–∞–∑–º–µ—Ä HTML: " . strlen($html) . " –±–∞–π—Ç</p>";

echo "<h2>2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML</h2>";

// –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
$patterns = [
    'JSON –¥–∞–Ω–Ω—ã–µ' => [
        '/window\.__INITIAL_STATE__\s*=\s*({.*?});/s',
        '/window\.__APP_DATA__\s*=\s*({.*?});/s',
        '/window\.__BANKS_DATA__\s*=\s*({.*?});/s',
        '/var\s+banksData\s*=\s*({.*?});/s'
    ],
    '–¢–∞–±–ª–∏—Ü—ã —Å –±–∞–Ω–∫–∞–º–∏' => [
        '/<table[^>]*>.*?–±–∞–Ω–∫.*?<\/table>/ius',
        '/<div[^>]*class="[^"]*bank[^"]*"[^>]*>.*?<\/div>/ius'
    ],
    '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏' => [
        '/–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è\s+—Å—Ç–∞–≤–∫–∞[^>]*>.*?(\d+[,.]\d+)\s*%/iu',
        '/–æ—Ç\s+(\d+[,.]\d+)\s*%/iu',
        '/1[,.]76\s*%/iu'
    ],
    'API endpoints' => [
        '/\/api\/[^"\']*rates[^"\']*/iu',
        '/\/api\/[^"\']*banks[^"\']*/iu',
        '/\/api\/[^"\']*tariffs[^"\']*/iu'
    ]
];

foreach ($patterns as $category => $category_patterns) {
    echo "<h3>" . $category . ":</h3>";
    $found = false;
    
    foreach ($category_patterns as $pattern) {
        if (preg_match_all($pattern, $html, $matches)) {
            $found = true;
            echo "<p style='color: green;'>‚úÖ –ù–∞–π–¥–µ–Ω–æ " . count($matches[0]) . " —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</p>";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
            for ($i = 0; $i < min(3, count($matches[0])); $i++) {
                $preview = substr($matches[0][$i], 0, 200);
                echo "<pre style='background: #f5f5f5; padding: 10px; margin: 5px 0; border-radius: 5px; font-size: 12px;'>" . esc_html($preview) . "...</pre>";
            }
            break;
        }
    }
    
    if (!$found) {
        echo "<p style='color: orange;'>‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ</p>";
    }
}

echo "<h2>3. –ü–æ–∏—Å–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö</h2>";

// –ò—â–µ–º –±–∞–Ω–∫–∏ –≤ HTML
$bank_patterns = [
    '–ù–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤' => '/([–ê-–Ø–Å][–∞-—è—ë\s]+(?:–±–∞–Ω–∫|–ë–∞–Ω–∫|–ë–ê–ù–ö)[–∞-—è—ë\s]*)/iu',
    '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏' => '/(\d+[,.]\d+)\s*%/u',
    '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' => '/<[^>]*>([^<]{3,50}(?:–±–∞–Ω–∫|–ë–∞–Ω–∫)[^<]{0,50})<\/[^>]*>.*?(\d+[,.]\d+)\s*%.*?(\d+[,.]\d+)\s*%.*?(\d+[,.]\d+)\s*%.*?(\d+[,.]\d+)\s*%/iu'
];

foreach ($bank_patterns as $type => $pattern) {
    if (preg_match_all($pattern, $html, $matches)) {
        echo "<h3>" . $type . " (–Ω–∞–π–¥–µ–Ω–æ " . count($matches[0]) . "):</h3>";
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $unique_matches = array_unique($matches[0]);
        $count = 0;
        foreach ($unique_matches as $match) {
            if ($count >= 10) break; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
            echo "<span style='background: #e8f4fd; padding: 2px 6px; margin: 2px; border-radius: 3px; display: inline-block; font-size: 12px;'>" . esc_html(trim($match)) . "</span>";
            $count++;
        }
        echo "<br><br>";
    }
}

echo "<h2>4. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω</h2>";

if (class_exists('BFCalc_Live_Rates')) {
    $plugin = new BFCalc_Live_Rates();
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º –∫–µ—à
    delete_transient('bfcalc_live_rates_v1');
    
    echo "<p>–ó–∞–ø—É—Å–∫ fetch_and_cache() —Å –Ω–æ–≤—ã–º URL...</p>";
    $result = $plugin->fetch_and_cache();
    
    if ($result && !empty($result['per_bank'])) {
        echo "<p style='color: green;'>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!</p>";
        echo "<p>–ù–∞–π–¥–µ–Ω–æ –±–∞–Ω–∫–æ–≤: " . count($result['per_bank']) . "</p>";
        echo "<p>–û–±–Ω–æ–≤–ª–µ–Ω–æ: " . $result['updated'] . "</p>";
        
        echo "<h3>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤:</h3>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        echo "<tr><th>–ë–∞–Ω–∫</th><th>44-–§–ó (—É—á–∞—Å—Ç–∏–µ)</th><th>44-–§–ó (–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)</th><th>44-–§–ó (–≥–∞—Ä–∞–Ω—Ç–∏—è)</th><th>44-–§–ó (–∞–≤–∞–Ω—Å)</th></tr>";
        
        $count = 0;
        foreach ($result['per_bank'] as $bank) {
            if ($count >= 5) break;
            echo "<tr>";
            echo "<td>" . esc_html($bank['name']) . "</td>";
            echo "<td>" . (isset($bank['44fz']['participation']) ? esc_html($bank['44fz']['participation']) . '%' : 'N/A') . "</td>";
            echo "<td>" . (isset($bank['44fz']['performance']) ? esc_html($bank['44fz']['performance']) . '%' : 'N/A') . "</td>";
            echo "<td>" . (isset($bank['44fz']['warranty']) ? esc_html($bank['44fz']['warranty']) . '%' : 'N/A') . "</td>";
            echo "<td>" . (isset($bank['44fz']['advance']) ? esc_html($bank['44fz']['advance']) . '%' : 'N/A') . "</td>";
            echo "</tr>";
            $count++;
        }
        echo "</table>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–∞–≤–∫—É
        $min_rate = null;
        foreach ($result['per_bank'] as $bank) {
            if (isset($bank['44fz']['participation'])) {
                if ($min_rate === null || $bank['44fz']['participation'] < $min_rate) {
                    $min_rate = $bank['44fz']['participation'];
                }
            }
        }
        
        if ($min_rate !== null) {
            echo "<p><strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É—á–∞—Å—Ç–∏—è (44-–§–ó): " . $min_rate . "%</strong></p>";
            if ($min_rate <= 1.76) {
                echo "<p style='color: green;'>‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ 1,76% –∏–ª–∏ –Ω–∏–∂–µ!</p>";
            } else {
                echo "<p style='color: orange;'>‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤—ã—à–µ 1,76%</p>";
            }
        }
        
    } else {
        echo "<p style='color: red;'>‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –¥–∞–Ω–Ω—ã–µ</p>";
        echo "<pre>" . print_r($result, true) . "</pre>";
    }
} else {
    echo "<p style='color: red;'>‚ùå –ü–ª–∞–≥–∏–Ω BFCalc_Live_Rates –Ω–µ –Ω–∞–π–¥–µ–Ω</p>";
}

echo "<h2>5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h2>";
echo "<ul>";
echo "<li>‚úÖ –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã JSON –¥–∞–Ω–Ω—ã–µ - –º–æ–∂–Ω–æ –∏–∑–≤–ª–µ—á—å —Ç–æ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏</li>";
echo "<li>‚úÖ –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ 1,76% - –∏—Å—Ç–æ—á–Ω–∏–∫ –∞–∫—Ç—É–∞–ª–µ–Ω</li>";
echo "<li>‚ö†Ô∏è –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –Ω—É–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å JavaScript –∑–∞–≥—Ä—É–∑–∫—É</li>";
echo "<li>üí° –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ AJAX –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã</li>";
echo "</ul>";

echo "<h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω</h2>";
?>
