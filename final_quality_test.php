<?php
/**
 * –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–ª–∞–≥–∏–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π
 * –° –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º WordPress
require_once('wp-config.php');
require_once('wp-load.php');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à –ø–ª–∞–≥–∏–Ω
require_once('wp-content/plugins/abp-article-quality-monitor/abp-article-quality-monitor.php');

echo "üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–õ–ê–ì–ò–ù–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–ê–ß–ï–°–¢–í–ê\n";
echo "============================================\n\n";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
$monitor = new ABP_Article_Quality_Monitor();

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
$all_posts = get_posts([
    'post_type' => 'post',
    'post_status' => 'publish',
    'numberposts' => -1,
    'orderby' => 'ID',
    'order' => 'DESC'
]);

echo "üìä –ü–†–û–í–ï–†–ö–ê –í–°–ï–• " . count($all_posts) . " –°–¢–ê–¢–ï–ô\n";
echo "===========================================\n\n";

$final_stats = [
    'total' => count($all_posts),
    'quality_ok' => 0,
    'has_issues' => 0,
    'ai_missing' => 0,
    'seo_missing' => 0,
    'alphabet_missing' => 0,
    'detailed_issues' => []
];

foreach ($all_posts as $post) {
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∞ ID: {$post->ID}...\n";
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    $ai_category = get_post_meta($post->ID, 'abp_ai_category', true);
    $first_letter = get_post_meta($post->ID, 'abp_first_letter', true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SEO –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
    $yoast_title = get_post_meta($post->ID, '_yoast_wpseo_title', true);
    $yoast_desc = get_post_meta($post->ID, '_yoast_wpseo_metadesc', true);
    $focus_keyword = get_post_meta($post->ID, '_yoast_wpseo_focuskw', true);
    $canonical = get_post_meta($post->ID, '_yoast_wpseo_canonical', true);
    
    $issues = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AI-–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if (empty($ai_category)) {
        $issues[] = 'AI-–∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        $final_stats['ai_missing']++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SEO
    $seo_issues = [];
    if (empty($yoast_title)) $seo_issues[] = 'SEO title';
    if (empty($yoast_desc)) $seo_issues[] = 'meta description';
    if (empty($focus_keyword)) $seo_issues[] = 'focus keyword';
    if (empty($canonical)) $seo_issues[] = 'canonical URL';
    
    if (!empty($seo_issues)) {
        $issues[] = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ' . implode(', ', $seo_issues);
        $final_stats['seo_missing']++;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    if (empty($first_letter)) {
        $issues[] = '–∞–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞';
        $final_stats['alphabet_missing']++;
    }
    
    if (empty($issues)) {
        $final_stats['quality_ok']++;
        echo "  ‚úÖ OK\n";
    } else {
        $final_stats['has_issues']++;
        $final_stats['detailed_issues'][] = [
            'id' => $post->ID,
            'title' => wp_trim_words($post->post_title, 8),
            'issues' => implode(', ', $issues)
        ];
        echo "  ‚ùå " . implode(', ', $issues) . "\n";
    }
}

echo "\nüìà –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n";
echo "========================\n";
echo "–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {$final_stats['total']}\n";
echo "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {$final_stats['quality_ok']} (" . round(($final_stats['quality_ok'] / $final_stats['total']) * 100, 1) . "%)\n";
echo "–° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {$final_stats['has_issues']} (" . round(($final_stats['has_issues'] / $final_stats['total']) * 100, 1) . "%)\n";
echo "–ë–µ–∑ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {$final_stats['ai_missing']}\n";
echo "–ë–µ–∑ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {$final_stats['seo_missing']}\n";
echo "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º: {$final_stats['alphabet_missing']}\n\n";

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
if ($final_stats['has_issues'] > 0) {
    echo "üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ü–†–û–ë–õ–ï–ú–ù–´–• –°–¢–ê–¢–ï–ô\n";
    echo "==============================================\n";
    
    $optimized_count = 0;
    
    foreach ($final_stats['detailed_issues'] as $problem) {
        echo "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ—Å—Ç–∞ ID: {$problem['id']} - {$problem['title']}...\n";
        
        $post = get_post($problem['id']);
        if (!$post) {
            echo "  ‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
            continue;
        }
        
        try {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—é
            if (class_exists('ABP_AI_Categorization')) {
                $ai_cat = new ABP_AI_Categorization();
                $ai_cat->categorize_post_with_ai($post->ID);
                echo "  ü§ñ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n";
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            if (class_exists('Yoast_Alphabet_Integration')) {
                $seo_opt = new Yoast_Alphabet_Integration();
                echo "  üîç SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n";
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            if (class_exists('ABP_Plugin')) {
                $abp = new ABP_Plugin();
                $abp->save_first_letter($post->ID, $post);
                echo "  üî§ –ê–ª—Ñ–∞–≤–∏—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n";
            }
            
            echo "  ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n";
            $optimized_count++;
            
        } catch (Exception $e) {
            echo "  ‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º–∏
        sleep(3);
    }
    
    echo "\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ô –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n";
    echo "=========================================\n";
    echo "–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: {$optimized_count}\n\n";
    
    // –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
    echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ (15 —Å–µ–∫—É–Ω–¥)...\n";
    sleep(15);
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    echo "\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–°–õ–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò\n";
    echo "======================================\n";
    
    $final_final_stats = [
        'total' => count($all_posts),
        'quality_ok' => 0,
        'has_issues' => 0,
        'ai_missing' => 0,
        'seo_missing' => 0,
        'alphabet_missing' => 0
    ];
    
    foreach ($all_posts as $post) {
        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
        $ai_category = get_post_meta($post->ID, 'abp_ai_category', true);
        $first_letter = get_post_meta($post->ID, 'abp_first_letter', true);
        
        $yoast_title = get_post_meta($post->ID, '_yoast_wpseo_title', true);
        $yoast_desc = get_post_meta($post->ID, '_yoast_wpseo_metadesc', true);
        $focus_keyword = get_post_meta($post->ID, '_yoast_wpseo_focuskw', true);
        $canonical = get_post_meta($post->ID, '_yoast_wpseo_canonical', true);
        
        $has_issues = false;
        
        if (empty($ai_category)) {
            $final_final_stats['ai_missing']++;
            $has_issues = true;
        }
        
        if (empty($yoast_title) || empty($yoast_desc) || empty($focus_keyword) || empty($canonical)) {
            $final_final_stats['seo_missing']++;
            $has_issues = true;
        }
        
        if (empty($first_letter)) {
            $final_final_stats['alphabet_missing']++;
            $has_issues = true;
        }
        
        if ($has_issues) {
            $final_final_stats['has_issues']++;
        } else {
            $final_final_stats['quality_ok']++;
        }
    }
    
    echo "üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–°–õ–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n";
    echo "========================================\n";
    echo "–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {$final_final_stats['total']}\n";
    echo "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {$final_final_stats['quality_ok']} (" . round(($final_final_stats['quality_ok'] / $final_final_stats['total']) * 100, 1) . "%)\n";
    echo "–° –ø—Ä–æ–±–ª–µ–º–∞–º–∏: {$final_final_stats['has_issues']} (" . round(($final_final_stats['has_issues'] / $final_final_stats['total']) * 100, 1) . "%)\n";
    echo "–ë–µ–∑ AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {$final_final_stats['ai_missing']}\n";
    echo "–ë–µ–∑ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {$final_final_stats['seo_missing']}\n";
    echo "–ü—Ä–æ–±–ª–µ–º—ã —Å –∞–ª—Ñ–∞–≤–∏—Ç–æ–º: {$final_final_stats['alphabet_missing']}\n\n";
    
    if ($final_final_stats['has_issues'] === 0) {
        echo "üéâ –£–°–ü–ï–•! –í–°–ï –°–¢–ê–¢–¨–ò –ü–û–õ–ù–û–°–¢–¨–Æ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´!\n";
        echo "‚úÖ 100% —Å—Ç–∞—Ç–µ–π –∏–º–µ—é—Ç AI-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n";
        echo "‚úÖ 100% —Å—Ç–∞—Ç–µ–π SEO-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã\n";
        echo "‚úÖ 100% —Å—Ç–∞—Ç–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ\n";
        echo "‚úÖ –ü–õ–ê–ì–ò–ù –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–ê–ß–ï–°–¢–í–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!\n\n";
    } else {
        echo "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞—Ç—å–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n";
        echo "–ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: " . round(($final_final_stats['quality_ok'] / $final_final_stats['total']) * 100, 1) . "%\n";
    }
    
} else {
    echo "üéâ –í–°–ï –°–¢–ê–¢–¨–ò –£–ñ–ï –ü–û–õ–ù–û–°–¢–¨–Æ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–´!\n";
    echo "‚úÖ 100% –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!\n";
}

echo "\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!\n";
echo "============================\n";
echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: " . date('Y-m-d H:i:s') . "\n";
echo "–ü–ª–∞–≥–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û\n";
?>



