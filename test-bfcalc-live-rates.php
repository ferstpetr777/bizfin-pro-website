<?php
/**
 * E2E —Ç–µ—Å—Ç—ã –¥–ª—è BFCalc Live Rates
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫
 */

// –ü–æ–¥–∫–ª—é—á–∞–µ–º WordPress
require_once('wp-config.php');
require_once('wp-load.php');

class BFCalc_Live_Rates_Tests {
    
    private $test_results = [];
    private $plugin_instance;
    
    public function __construct() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if (!class_exists('BFCalc_Live_Rates')) {
            $this->add_result('ERROR', '–ü–ª–∞–≥–∏–Ω BFCalc_Live_Rates –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        
        $this->plugin_instance = new BFCalc_Live_Rates();
    }
    
    public function run_all_tests() {
        echo "<h1>üß™ BFCalc Live Rates - E2E –¢–µ—Å—Ç—ã</h1>\n";
        echo "<style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .test-pass { color: green; }
            .test-fail { color: red; }
            .test-warn { color: orange; }
            .test-info { color: blue; }
            .test-section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
            .test-result { margin: 10px 0; padding: 10px; background: #f9f9f9; border-radius: 3px; }
        </style>\n";
        
        $this->test_plugin_activation();
        $this->test_rest_api_endpoint();
        $this->test_rate_parsing();
        $this->test_caching_mechanism();
        $this->test_calculator_integration();
        $this->test_error_handling();
        
        $this->display_summary();
    }
    
    private function add_result($type, $message, $details = '') {
        $this->test_results[] = [
            'type' => $type,
            'message' => $message,
            'details' => $details,
            'timestamp' => current_time('mysql')
        ];
    }
    
    private function test_plugin_activation() {
        echo "<div class='test-section'>";
        echo "<h2>üîß –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞</h2>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
        if (class_exists('BFCalc_Live_Rates')) {
            $this->add_result('PASS', '–ü–ª–∞–≥–∏–Ω BFCalc_Live_Rates —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
            echo "<div class='test-result test-pass'>‚úÖ –ü–ª–∞–≥–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω</div>";
        } else {
            $this->add_result('FAIL', '–ü–ª–∞–≥–∏–Ω BFCalc_Live_Rates –Ω–µ –Ω–∞–π–¥–µ–Ω');
            echo "<div class='test-result test-fail'>‚ùå –ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω</div>";
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º REST API –º–∞—Ä—à—Ä—É—Ç—ã
        $routes = rest_get_server()->get_routes();
        if (isset($routes['/bfcalc/v1/rates'])) {
            $this->add_result('PASS', 'REST API –º–∞—Ä—à—Ä—É—Ç /bfcalc/v1/rates –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
            echo "<div class='test-result test-pass'>‚úÖ REST API –º–∞—Ä—à—Ä—É—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω</div>";
        } else {
            $this->add_result('FAIL', 'REST API –º–∞—Ä—à—Ä—É—Ç /bfcalc/v1/rates –Ω–µ –Ω–∞–π–¥–µ–Ω');
            echo "<div class='test-result test-fail'>‚ùå REST API –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</div>";
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º cron –∑–∞–¥–∞—á–∏
        $next_cron = wp_next_scheduled('bfcalc_fetch_rates_daily');
        if ($next_cron) {
            $this->add_result('PASS', 'Cron –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ' . date('Y-m-d H:i:s', $next_cron));
            echo "<div class='test-result test-pass'>‚úÖ Cron –∑–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</div>";
        } else {
            $this->add_result('WARN', 'Cron –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞');
            echo "<div class='test-result test-warn'>‚ö†Ô∏è Cron –∑–∞–¥–∞—á–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞</div>";
        }
        
        echo "</div>";
    }
    
    private function test_rest_api_endpoint() {
        echo "<div class='test-section'>";
        echo "<h2>üåê –¢–µ—Å—Ç REST API —ç–Ω–¥–ø–æ–π–Ω—Ç–∞</h2>";
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–π–Ω—Ç
        $url = home_url('/wp-json/bfcalc/v1/rates?scheme=avg');
        $response = wp_remote_get($url, ['timeout' => 10]);
        
        if (is_wp_error($response)) {
            $this->add_result('FAIL', '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ REST API: ' . $response->get_error_message());
            echo "<div class='test-result test-fail'>‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: " . $response->get_error_message() . "</div>";
        } else {
            $status_code = wp_remote_retrieve_response_code($response);
            $body = wp_remote_retrieve_body($response);
            $data = json_decode($body, true);
            
            if ($status_code === 200) {
                $this->add_result('PASS', 'REST API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º 200');
                echo "<div class='test-result test-pass'>‚úÖ REST API –æ—Ç–≤–µ—á–∞–µ—Ç (200)</div>";
                
                if ($data && isset($data['ok'])) {
                    if ($data['ok']) {
                        $this->add_result('PASS', 'API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
                        echo "<div class='test-result test-pass'>‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>";
                        
                        if (isset($data['baseRates'])) {
                            $this->add_result('PASS', '–ù–∞–π–¥–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏');
                            echo "<div class='test-result test-pass'>‚úÖ –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω—ã</div>";
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞–≤–æ–∫
                            $required_modes = ['44fz', '223fz', '185fz', 'comm'];
                            $required_types = ['participation', 'performance', 'warranty', 'advance'];
                            
                            foreach ($required_modes as $mode) {
                                if (isset($data['baseRates'][$mode])) {
                                    foreach ($required_types as $type) {
                                        if (isset($data['baseRates'][$mode][$type])) {
                                            $rate = $data['baseRates'][$mode][$type];
                                            if (is_numeric($rate) && $rate > 0 && $rate < 20) {
                                                $this->add_result('PASS', "–°—Ç–∞–≤–∫–∞ {$mode}.{$type}: {$rate}%");
                                            } else {
                                                $this->add_result('WARN', "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ {$mode}.{$type}: {$rate}%");
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            $this->add_result('WARN', '–ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ');
                        }
                    } else {
                        $this->add_result('WARN', 'API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ok=false: ' . ($data['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                        echo "<div class='test-result test-warn'>‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É: " . ($data['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') . "</div>";
                    }
                } else {
                    $this->add_result('FAIL', 'API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON');
                    echo "<div class='test-result test-fail'>‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç–≤–µ—Ç</div>";
                }
            } else {
                $this->add_result('FAIL', "REST API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {$status_code}");
                echo "<div class='test-result test-fail'>‚ùå HTTP {$status_code}</div>";
            }
        }
        
        echo "</div>";
    }
    
    private function test_rate_parsing() {
        echo "<div class='test-section'>";
        echo "<h2>üìä –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–≤–æ–∫</h2>";
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
        $instance = new BFCalc_Live_Rates();
        $result = $instance->fetch_and_cache();
        
        if ($result && !empty($result['per_bank'])) {
            $this->add_result('PASS', '–ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ –±–∞–Ω–∫–æ–≤: ' . count($result['per_bank']));
            echo "<div class='test-result test-pass'>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω</div>";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            echo "<h3>–ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:</h3>";
            echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
            echo "<tr><th>–ë–∞–Ω–∫</th><th>44-–§–ó (—É—á–∞—Å—Ç–∏–µ)</th><th>44-–§–ó (–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ)</th><th>223-–§–ó (—É—á–∞—Å—Ç–∏–µ)</th><th>–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π (—É—á–∞—Å—Ç–∏–µ)</th></tr>";
            
            foreach (array_slice($result['per_bank'], 0, 5) as $bank) {
                echo "<tr>";
                echo "<td>" . esc_html($bank['name']) . "</td>";
                echo "<td>" . ($bank['44fz']['participation'] ?? 'N/A') . "%</td>";
                echo "<td>" . ($bank['44fz']['performance'] ?? 'N/A') . "%</td>";
                echo "<td>" . ($bank['223fz']['participation'] ?? 'N/A') . "%</td>";
                echo "<td>" . ($bank['comm']['participation'] ?? 'N/A') . "%</td>";
                echo "</tr>";
            }
            echo "</table>";
            
            $this->add_result('INFO', '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ' . $result['updated']);
        } else {
            $this->add_result('WARN', '–ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –¥–∞–Ω–Ω—ã–µ');
            echo "<div class='test-result test-warn'>‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</div>";
        }
        
        echo "</div>";
    }
    
    private function test_caching_mechanism() {
        echo "<div class='test-section'>";
        echo "<h2>üíæ –¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è</h2>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º transient
        $cached_data = get_transient('bfcalc_live_rates_v1');
        
        if ($cached_data) {
            $this->add_result('PASS', '–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–µ—à–µ');
            echo "<div class='test-result test-pass'>‚úÖ –ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ</div>";
            
            if (isset($cached_data['updated'])) {
                $this->add_result('INFO', '–ö–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: ' . $cached_data['updated']);
                echo "<div class='test-result test-info'>‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . $cached_data['updated'] . "</div>";
            }
            
            if (isset($cached_data['per_bank']) && is_array($cached_data['per_bank'])) {
                $this->add_result('PASS', '–ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç ' . count($cached_data['per_bank']) . ' –±–∞–Ω–∫–æ–≤');
                echo "<div class='test-result test-pass'>‚úÖ –ö–µ—à —Å–æ–¥–µ—Ä–∂–∏—Ç " . count($cached_data['per_bank']) . " –±–∞–Ω–∫–æ–≤</div>";
            }
        } else {
            $this->add_result('WARN', '–ö–µ—à –ø—É—Å—Ç');
            echo "<div class='test-result test-warn'>‚ö†Ô∏è –ö–µ—à –ø—É—Å—Ç</div>";
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º TTL
        $transient_timeout = get_option('_transient_timeout_bfcalc_live_rates_v1');
        if ($transient_timeout) {
            $time_left = $transient_timeout - time();
            $hours_left = round($time_left / 3600, 1);
            $this->add_result('INFO', "–ö–µ—à –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {$hours_left} —á–∞—Å–æ–≤");
            echo "<div class='test-result test-info'>‚ÑπÔ∏è –ö–µ—à –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {$hours_left} —á–∞—Å–æ–≤</div>";
        }
        
        echo "</div>";
    }
    
    private function test_calculator_integration() {
        echo "<div class='test-section'>";
        echo "<h2>üßÆ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º</h2>";
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        $calc_file = ABSPATH . 'bfcalc-updated.html';
        if (file_exists($calc_file)) {
            $this->add_result('PASS', '–§–∞–π–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω');
            echo "<div class='test-result test-pass'>‚úÖ –§–∞–π–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–∞–π–¥–µ–Ω</div>";
            
            $content = file_get_contents($calc_file);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            $checks = [
                'loadLiveRates' => '–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ live-—Å—Ç–∞–≤–æ–∫',
                'applyLiveRates' => '–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫',
                'paintLiveStatus' => '–§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞',
                '/wp-json/bfcalc/v1/rates' => 'URL API —ç–Ω–¥–ø–æ–π–Ω—Ç–∞',
                'res__live' => '–≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç–∞–≤–æ–∫'
            ];
            
            foreach ($checks as $check => $description) {
                if (strpos($content, $check) !== false) {
                    $this->add_result('PASS', $description . ' –Ω–∞–π–¥–µ–Ω–∞');
                    echo "<div class='test-result test-pass'>‚úÖ {$description}</div>";
                } else {
                    $this->add_result('FAIL', $description . ' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                    echo "<div class='test-result test-fail'>‚ùå {$description}</div>";
                }
            }
        } else {
            $this->add_result('FAIL', '–§–∞–π–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            echo "<div class='test-result test-fail'>‚ùå –§–∞–π–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>";
        }
        
        echo "</div>";
    }
    
    private function test_error_handling() {
        echo "<div class='test-section'>";
        echo "<h2>‚ö†Ô∏è –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫</h2>";
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        $url = home_url('/wp-json/bfcalc/v1/rates?scheme=invalid');
        $response = wp_remote_get($url, ['timeout' => 5]);
        
        if (!is_wp_error($response)) {
            $status_code = wp_remote_retrieve_response_code($response);
            if ($status_code === 200) {
                $this->add_result('PASS', 'API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
                echo "<div class='test-result test-pass'>‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç</div>";
            } else {
                $this->add_result('WARN', "API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ {$status_code} –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤");
                echo "<div class='test-result test-warn'>‚ö†Ô∏è HTTP {$status_code} –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</div>";
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        $this->add_result('INFO', '–¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏');
        echo "<div class='test-result test-info'>‚ÑπÔ∏è –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏</div>";
        
        echo "</div>";
    }
    
    private function display_summary() {
        echo "<div class='test-section'>";
        echo "<h2>üìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤</h2>";
        
        $pass_count = 0;
        $fail_count = 0;
        $warn_count = 0;
        $info_count = 0;
        
        foreach ($this->test_results as $result) {
            switch ($result['type']) {
                case 'PASS': $pass_count++; break;
                case 'FAIL': $fail_count++; break;
                case 'WARN': $warn_count++; break;
                case 'INFO': $info_count++; break;
            }
        }
        
        echo "<div style='font-size: 18px; margin: 20px 0;'>";
        echo "<span class='test-pass'>‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {$pass_count}</span> | ";
        echo "<span class='test-fail'>‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {$fail_count}</span> | ";
        echo "<span class='test-warn'>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {$warn_count}</span> | ";
        echo "<span class='test-info'>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {$info_count}</span>";
        echo "</div>";
        
        if ($fail_count === 0) {
            echo "<div class='test-result test-pass' style='font-size: 16px; font-weight: bold;'>";
            echo "üéâ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.";
            echo "</div>";
        } else {
            echo "<div class='test-result test-fail' style='font-size: 16px; font-weight: bold;'>";
            echo "‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è.";
            echo "</div>";
        }
        
        echo "<h3>–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</h3>";
        echo "<table border='1' style='border-collapse: collapse; width: 100%;'>";
        echo "<tr><th>–¢–∏–ø</th><th>–°–æ–æ–±—â–µ–Ω–∏–µ</th><th>–í—Ä–µ–º—è</th></tr>";
        
        foreach ($this->test_results as $result) {
            $class = 'test-' . strtolower($result['type']);
            echo "<tr class='{$class}'>";
            echo "<td>{$result['type']}</td>";
            echo "<td>{$result['message']}</td>";
            echo "<td>{$result['timestamp']}</td>";
            echo "</tr>";
        }
        
        echo "</table>";
        echo "</div>";
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (isset($_GET['run_tests'])) {
    $tests = new BFCalc_Live_Rates_Tests();
    $tests->run_all_tests();
} else {
    echo "<h1>BFCalc Live Rates - E2E –¢–µ—Å—Ç—ã</h1>";
    echo "<p><a href='?run_tests=1' style='background: #0073aa; color: white; padding: 10px 20px; text-decoration: none; border-radius: 3px;'>üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã</a></p>";
    echo "<p>–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫.</p>";
    echo "<h2>–ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è:</h2>";
    echo "<ul>";
    echo "<li>‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞</li>";
    echo "<li>‚úÖ –†–∞–±–æ—Ç–∞ REST API —ç–Ω–¥–ø–æ–π–Ω—Ç–∞</li>";
    echo "<li>‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞–≤–æ–∫ —Å –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞</li>";
    echo "<li>‚úÖ –ú–µ—Ö–∞–Ω–∏–∑–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è</li>";
    echo "<li>‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º</li>";
    echo "<li>‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫</li>";
    echo "</ul>";
}
?>
