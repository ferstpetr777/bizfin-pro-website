<?php
/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é ABP Image Generator
 */

require_once('wp-config.php');
require_once('wp-load.php');

echo "üñºÔ∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n";
echo "===========================\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–∞–≥–∏–Ω–∞ ABP Image Generator
$plugin_path = 'wp-content/plugins/bizfin-seo-article-generator/';
if (!file_exists($plugin_path)) {
    echo "‚ùå –ü–ª–∞–≥–∏–Ω ABP Image Generator –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $plugin_path\n";
    echo "üîç –ò—â–µ–º –ø–ª–∞–≥–∏–Ω...\n";
    
    $possible_paths = [
        'wp-content/plugins/bizfin-seo-article-generator/',
        'wp-content/plugins/abp-image-generator/',
        'wp-content/plugins/image-generator/'
    ];
    
    $found_plugin = false;
    foreach ($possible_paths as $path) {
        if (file_exists($path)) {
            $plugin_path = $path;
            $found_plugin = true;
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–≥–∏–Ω –≤: $path\n";
            break;
        }
    }
    
    if (!$found_plugin) {
        echo "‚ùå –ü–ª–∞–≥–∏–Ω ABP Image Generator –Ω–µ –Ω–∞–π–¥–µ–Ω\n";
        echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:\n";
        $plugins = glob('wp-content/plugins/*', GLOB_ONLYDIR);
        foreach ($plugins as $plugin) {
            echo "   ‚Ä¢ " . basename($plugin) . "\n";
        }
        exit(1);
    }
}

echo "‚úÖ –ü–ª–∞–≥–∏–Ω –Ω–∞–π–¥–µ–Ω: $plugin_path\n\n";

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–µ–¥–∏–∞–±–∏–±–ª–∏–æ—Ç–µ–∫–∏
echo "üìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–¥–∏–∞–±–∏–±–ª–∏–æ—Ç–µ–∫–µ:\n";
$images = get_posts([
    'post_type' => 'attachment',
    'post_mime_type' => 'image',
    'numberposts' => -1,
    'post_status' => 'inherit'
]);

echo "   ‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . count($images) . "\n";

// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
$large_images = [];
$total_size = 0;

foreach ($images as $image) {
    $file_path = get_attached_file($image->ID);
    if ($file_path && file_exists($file_path)) {
        $file_size = filesize($file_path);
        $total_size += $file_size;
        
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–æ–ª—å—à–µ 1MB —Å—á–∏—Ç–∞–µ–º –±–æ–ª—å—à–∏–º–∏
        if ($file_size > 1024 * 1024) {
            $large_images[] = [
                'id' => $image->ID,
                'title' => $image->post_title,
                'size' => $file_size,
                'path' => $file_path
            ];
        }
    }
}

echo "   ‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: " . round($total_size / 1024 / 1024, 2) . " MB\n";
echo "   ‚Ä¢ –ë–æ–ª—å—à–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (>1MB): " . count($large_images) . "\n\n";

if (empty($large_images)) {
    echo "‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n";
    exit(0);
}

echo "üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ë–û–õ–¨–®–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:\n";
echo "====================================\n\n";

$optimized_count = 0;
$total_saved = 0;

foreach ($large_images as $image_data) {
    echo "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: " . $image_data['title'] . "\n";
    echo "   ‚Ä¢ –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä: " . round($image_data['size'] / 1024 / 1024, 2) . " MB\n";
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    $original_path = $image_data['path'];
    $path_info = pathinfo($original_path);
    $optimized_path = $path_info['dirname'] . '/' . $path_info['filename'] . '_optimized.' . $path_info['extension'];
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º ImageMagick –∏–ª–∏ GD –¥–ª—è —Å–∂–∞—Ç–∏—è
    if (extension_loaded('imagick')) {
        $imagick = new Imagick($original_path);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
        $imagick->setImageCompressionQuality(85);
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –±–æ–ª—å—à–µ 1920px
        $geometry = $imagick->getImageGeometry();
        if ($geometry['width'] > 1920 || $geometry['height'] > 1920) {
            $imagick->resizeImage(1920, 1920, Imagick::FILTER_LANCZOS, 1, true);
        }
        
        $imagick->writeImage($optimized_path);
        $imagick->clear();
        $imagick->destroy();
        
    } elseif (extension_loaded('gd')) {
        $image_info = getimagesize($original_path);
        $mime_type = $image_info['mime'];
        
        switch ($mime_type) {
            case 'image/jpeg':
                $source = imagecreatefromjpeg($original_path);
                break;
            case 'image/png':
                $source = imagecreatefrompng($original_path);
                break;
            case 'image/gif':
                $source = imagecreatefromgif($original_path);
                break;
            default:
                echo "   ‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: $mime_type\n";
                continue 2;
        }
        
        if (!$source) {
            echo "   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n";
            continue;
        }
        
        // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        $width = imagesx($source);
        $height = imagesy($source);
        
        if ($width > 1920 || $height > 1920) {
            $ratio = min(1920 / $width, 1920 / $height);
            $new_width = $width * $ratio;
            $new_height = $height * $ratio;
            
            $resized = imagecreatetruecolor($new_width, $new_height);
            imagecopyresampled($resized, $source, 0, 0, 0, 0, $new_width, $new_height, $width, $height);
            imagedestroy($source);
            $source = $resized;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –∫–∞—á–µ—Å—Ç–≤–æ–º 85%
        switch ($mime_type) {
            case 'image/jpeg':
                imagejpeg($source, $optimized_path, 85);
                break;
            case 'image/png':
                imagepng($source, $optimized_path, 8);
                break;
            case 'image/gif':
                imagegif($source, $optimized_path);
                break;
        }
        
        imagedestroy($source);
    } else {
        echo "   ‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã ImageMagick –∏–ª–∏ GD\n";
        continue;
    }
    
    if (file_exists($optimized_path)) {
        $new_size = filesize($optimized_path);
        $saved = $image_data['size'] - $new_size;
        $saved_percent = round(($saved / $image_data['size']) * 100, 1);
        
        echo "   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " . round($new_size / 1024 / 1024, 2) . " MB\n";
        echo "   üíæ –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ: " . round($saved / 1024 / 1024, 2) . " MB ($saved_percent%)\n";
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        if (copy($optimized_path, $original_path)) {
            unlink($optimized_path);
            $optimized_count++;
            $total_saved += $saved;
            echo "   üîÑ –û—Ä–∏–≥–∏–Ω–∞–ª –∑–∞–º–µ–Ω–µ–Ω\n";
        } else {
            echo "   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª\n";
        }
    } else {
        echo "   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n";
    }
    
    echo "\n";
}

echo "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:\n";
echo "===========================\n";
echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: $optimized_count\n";
echo "üíæ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è: " . round($total_saved / 1024 / 1024, 2) . " MB\n";
echo "üìà –ü—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏: " . round(($total_saved / $total_size) * 100, 1) . "%\n\n";

// –°–æ–∑–¥–∞–µ–º WebP –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
echo "üåê –°–û–ó–î–ê–ù–ò–ï WEBP –í–ï–†–°–ò–ô:\n";
echo "=========================\n";

$webp_count = 0;
foreach ($images as $image) {
    $file_path = get_attached_file($image->ID);
    if ($file_path && file_exists($file_path)) {
        $path_info = pathinfo($file_path);
        $webp_path = $path_info['dirname'] . '/' . $path_info['filename'] . '.webp';
        
        if (!file_exists($webp_path)) {
            if (extension_loaded('imagick')) {
                $imagick = new Imagick($file_path);
                $imagick->setImageFormat('webp');
                $imagick->setImageCompressionQuality(85);
                $imagick->writeImage($webp_path);
                $imagick->clear();
                $imagick->destroy();
                $webp_count++;
            }
        }
    }
}

echo "‚úÖ –°–æ–∑–¥–∞–Ω–æ WebP –≤–µ—Ä—Å–∏–π: $webp_count\n\n";

// –û–±–Ω–æ–≤–ª—è–µ–º sitemap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
echo "üó∫Ô∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï SITEMAP –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:\n";
echo "===================================\n";

$sitemap_images_content = '<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
        xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">';

foreach ($images as $image) {
    $file_path = get_attached_file($image->ID);
    if ($file_path && file_exists($file_path)) {
        $image_url = wp_get_attachment_url($image->ID);
        $image_title = $image->post_title ?: $image->post_name;
        
        $sitemap_images_content .= '
  <url>
    <loc>' . $image_url . '</loc>
    <image:image>
      <image:loc>' . $image_url . '</image:loc>
      <image:title>' . htmlspecialchars($image_title) . '</image:title>
      <image:caption></image:caption>
    </image:image>
  </url>';
    }
}

$sitemap_images_content .= '
</urlset>';

file_put_contents('sitemap-images.xml', $sitemap_images_content);
echo "‚úÖ Sitemap –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω\n\n";

echo "üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n";
echo "1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n";
echo "2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebP —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤\n";
echo "3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n";
echo "4. –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN\n";
echo "5. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n";

echo "‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n";
?>

